{"version":3,"sources":["ng://twa-md2-notifications/lib/twa-md2-notifications.service.ts","ng://twa-md2-notifications/lib/twa-md2-notifications.component.ts","ng://twa-md2-notifications/lib/twa-md2-notifications.module.ts"],"names":["TwaMd2NotificationsService","prototype","add","notif","console","log","this","queue","push","remove","idx","splice","get","of","clicked","Injectable","args","providedIn","TwaMd2NotificationsComponent","_elRef","EventEmitter","ngOnInit","_this","notifsService","subscribe","data","notifs","globalClick","fromEvent","document","pipe","delay","tap","listening","event","onGlobalClick","MouseEvent","notifPanel","undefined","nativeElement","target","isDescendant","hasClass","isOpened","elem","className","classList","contains","parent","child","node","parentNode","notifClicked","length","notifPanelClicked","notifIdx","action","panelClicked","emit","checkIfOpened","removePanel","clearPanels","setTimeout","connectedOverlayDetach","Component","selector","template","styles","ElementRef","Input","Output","ViewChild","TwaMd2NotificationsModule","NgModule","imports","CommonModule","FlexLayoutModule","MatCardModule","MatButtonModule","MatIconModule","OverlayModule","declarations","exports","entryComponents","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nexport interface INotif {\n    title: string;\n    message: string;\n    date: string;\n    data?: any;\n    icon?: string;\n    image?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TwaMd2NotificationsService {\n\n    private queue: INotif[] = [];\n\n    constructor() { }\n\n    public add(notif: INotif) {\n        console.log(notif);\n        this.queue.push(notif);\n    }\n\n    public remove(idx: number) {\n        this.queue.splice(idx, 1);\n    }\n\n    public get(): Observable<INotif[]> {\n        return of(this.queue);\n    }\n\n    public clicked(notif: INotif) {\n        console.log(notif);\n    }\n\n}\n","import { Component, OnInit, Input, Output, ViewChild, EventEmitter, ElementRef } from '@angular/core';\nimport { TwaMd2NotificationsService, INotif } from './twa-md2-notifications.service';\nimport { Observable, fromEvent } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\n// import { EventEmitter } from 'protractor';\n\n@Component({\n    selector: 'twa-md2-notifications',\n    template: `\n        <button mat-icon-button #overlayOrigin=\"cdkOverlayOrigin\" cdkOverlayOrigin (click)=\"notifClicked()\">\n            <mat-icon *ngIf=\"notifs.length\">notifications</mat-icon>\n            <mat-icon *ngIf=\"notifs.length===0\">notifications_none</mat-icon>\n        </button>\n        <ng-template\n            cdkConnectedOverlay\n            [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n            [cdkConnectedOverlayOpen]=\"isOpened\"\n            (detach)=\"connectedOverlayDetach()\"\n        >\n            <div #notifPanelContainer class=\"notifPanelContainer twa-notif\" fxLayoutGap=\"12px\">\n                <div fxLayout=\"row\" class=\"panelTitle twa-notif\">\n                    <h3 class=\"twa-notif\" fxFlex>Notifications</h3>\n                    <button class=\"twa-notif\" mat-icon-button (click)=\"clearPanels()\">\n                        <mat-icon class=\"twa-notif\">clear_all</mat-icon>\n                    </button>\n                </div>\n                <mat-card *ngFor=\"let notif of notifs; let i = index\" \n                          fxLayout=\"row\"\n                          class=\"notif twa-notif\"\n                          (click)=\"notifPanelClicked(notif, i)\">\n                    <div class=\"cicon twa-notif\">\n                        <mat-icon class=\"panelIcon twa-notif\" *ngIf=\"!notif.image\">notifications</mat-icon>\n                        <img class=\"notifImage twa-notif\" *ngIf=\"notif.image\" [src]=\"notif.image\" />\n                    </div>\n                    <div class=\"ccontent twa-notif\" fxLayout=\"column\">\n                        <div fxLayout=\"row\" class=\"twa-notif\">\n                            <h4 class=\"twa-notif\" fxFlex>{{notif.title}}</h4>\n                            <button class=\"close twa-notif\" mat-icon-button (click)=\"removePanel(i)\">\n                                <mat-icon class=\"twa-notif\">close</mat-icon>\n                            </button>\n                        </div>\n                        <p class=\"twa-notif\" fxFlex>{{notif.message}}</p>\n                    </div>\n                </mat-card>\n                <div class=\"notifPanelHideButton twa-notif\" (click)=\"isOpened = false\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                    <mat-icon>expand_less</mat-icon>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        '.notifPanelContainer { width: 320px; background: #eee; border: 1px solid #ccc;' +\n                               'padding: 12px 12px 4px 12px; box-shadow: 0 2px 10px rgba(0,0,0,.2); }',\n        '.notifPanelHideButton { width: 100%; height: 18px; border-top: 1px solid #ccc; cursor: pointer; }',\n        'div.panelTitle h3 { color: #aaa; font-weight: 900; font-family: Roboto Light; font-size: 26px; margin: 8px; }',\n        'mat-card.notif { cursor: pointer; padding: 12px 12px 12px 8px; margin: 0 0 8px 0!important; }',\n        'mat-card.notif h4 { font-family: Roboto Light; font-size: 16px; margin: 8px 0 0; }',\n        'mat-card.notif p { font-family: Roboto Light; margin: 8px 0 0; }',\n        '.cicon { padding: 12px 12px 12px 4px; }',\n        '.ccontent { width: 100%; }',\n        'mat-icon.panelIcon { font-size: 40px; height: 40px; width: 40px; line-height: 40px; }',\n        'img.notifImage { width: 40x; height: 40px; border-radius: 50%; }',\n        'button.close { margin: -12px -12px 0 0;}',\n    ]\n})\nexport class TwaMd2NotificationsComponent implements OnInit {\n    @Input() notifsService: TwaMd2NotificationsService;\n    @Output() panelClicked: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('notifPanelContainer') notifPanel;\n\n    private globalClick: Observable<Event>;\n    private listening: boolean;\n\n    isOpened = false;\n    notifs: INotif[];\n\n    constructor(\n        private _elRef: ElementRef,\n    ) { }\n\n    ngOnInit() {\n        this.notifsService.get().subscribe(data => {\n            this.notifs = data;\n        });\n        this.globalClick = fromEvent(document, 'click').pipe(\n            delay(1),\n            tap(() => {\n                this.listening = true;\n            })\n        );\n        this.globalClick.subscribe((event: MouseEvent) => {\n            this.onGlobalClick(event);\n        });\n    }\n\n    onGlobalClick(event: MouseEvent) {\n        if (event instanceof MouseEvent &&\n            this.listening === true &&\n            typeof this.notifPanel !== 'undefined' &&\n            this.notifPanel !== undefined) {\n            console.log(this.notifPanel.nativeElement);\n            console.log(this._elRef.nativeElement);\n            console.log(event.target);\n            if (this.isDescendant(this.notifPanel.nativeElement, event.target) !== true &&\n                this.isDescendant(this._elRef.nativeElement, event.target) !== true &&\n                this._elRef.nativeElement !== event.target &&\n                !this.hasClass(event.target, 'twa-notif')) {\n                this.isOpened = false;\n            }\n        }\n    }\n\n    hasClass(elem, className) {\n        if (elem.classList.contains(className)) {\n            return true;\n        }\n        return false;\n    }\n\n    isDescendant(parent, child) {\n        let node = child;\n        while (node !== null) {\n            if (node === parent) {\n                return true;\n            } else {\n                node = node.parentNode;\n            }\n        }\n        return false;\n    }\n\n    notifClicked() {\n        console.log('notif icon clicked!');\n        if (!this.isOpened && !this.notifs.length) {\n            return;\n        }\n        this.isOpened = !this.isOpened;\n    }\n\n    notifPanelClicked(notif: INotif, notifIdx: number) {\n        console.log('notif panel clicked!', notif);\n        if (typeof notif.data !== 'undefined' &&\n        typeof notif.data.action !== 'undefined') {\n            notif.data.action(notif);\n        } else {\n            this.panelClicked.emit(notif);\n        }\n        this.notifsService.remove(notifIdx);\n        this.checkIfOpened();\n    }\n\n    checkIfOpened() {\n        if (this.notifs.length === 0) {\n            this.isOpened = false;\n        }\n    }\n\n    removePanel(notifIdx: number) {\n        this.notifsService.remove(notifIdx);\n        this.checkIfOpened();\n    }\n\n    clearPanels() {\n        if (this.notifs.length) {\n            this.notifs.splice(0, 1);\n            setTimeout(() => {\n                this.clearPanels();\n            }, 200);\n        } else {\n            this.checkIfOpened();\n        }\n    }\n\n    connectedOverlayDetach() {\n        console.log('overlay detached!');\n    }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCardModule } from '@angular/material/card';\n// import { TwaMd2NotificationsService } from './twa-md2-notifications.service';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { TwaMd2NotificationsComponent } from './twa-md2-notifications.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MatCardModule,\n        MatButtonModule,\n        MatIconModule,\n        OverlayModule,\n        // TwaMd2NotificationsComponent,\n    ],\n    declarations: [\n        TwaMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    exports: [\n        OverlayModule,\n        TwaMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    entryComponents: [\n        TwaMd2NotificationsComponent,\n    ],\n    providers: [\n        TwaMd2NotificationsComponent,\n    ],\n    schemas: [\n        CUSTOM_ELEMENTS_SCHEMA\n    ]\n})\nexport class TwaMd2NotificationsModule { }\n"]}