!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/material"),require("@angular/forms"),require("rxjs/operators"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/material/input"),require("@angular/material/checkbox"),require("@angular/material/select"),require("@angular/material/radio"),require("@angular/material/datepicker"),require("@angular/material/autocomplete"),require("ngx-material-timepicker"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define("twa-md2-dialogs",["exports","@angular/core","@angular/material","@angular/forms","rxjs/operators","@angular/common","@angular/flex-layout","@angular/material/input","@angular/material/checkbox","@angular/material/select","@angular/material/radio","@angular/material/datepicker","@angular/material/autocomplete","ngx-material-timepicker","@angular/platform-browser"],t):t(e["twa-md2-dialogs"]={},e.ng.core,e.ng.material,e.ng.forms,e.rxjs.operators,e.ng.common,e.ng["flex-layout"],e.ng.material.input,e.ng.material.checkbox,e.ng.material.select,e.ng.material.radio,e.ng.material.datepicker,e.ng.material.autocomplete,null,e.ng.platformBrowser)}(this,function(e,t,o,m,n,r,a,i,l,p,u,c,s,f,d){"use strict";var g=function(){function e(e){this.dialogRef=e}return e.decorators=[{type:t.Component,args:[{selector:"twa-app-confirm-dialog",template:'\n    <h2>{{ title }}</h2>\n    <p [innerHtml]="messageHtml"></p>\n\n    <button type="button" mat-raised-button\n        (click)="dialogRef.close(true)">{{ okText }}</button>\n    <button type="button" mat-button *ngIf="cancelText > \'\'"\n        (click)="dialogRef.close()">{{ cancelText }}</button>\n    '}]}],e.ctorParameters=function(){return[{type:o.MatDialogRef}]},e}();var y=function(){function e(e){this.dialogRef=e,this.form=new m.FormGroup({}),this.formSubmitEv=new t.EventEmitter}return e.prototype.ngOnInit=function(){var e={};for(var t in this.fields)this.fields.hasOwnProperty(t)&&(e[this.fields[t].key]=new m.FormControl(this.fields[t].value||"",this.mapValidators(this.fields[t].validation)),console.log(this.fields[t].autocomplete),"undefined"!=typeof this.fields[t].autocomplete&&this.fields[t].autocomplete!==undefined&&(console.log(this.fields[t].autocomplete),this.fields[t].autocomplete.filteredOptions=this.getFormGroupEvent(e,t)));this.form=new m.FormGroup(e)},e.prototype.getFormGroupEvent=function(e,t){var o=this;return e[this.fields[t].key].valueChanges.pipe(n.startWith(""),n.map(function(e){return e?o._filterValues(e,o.fields[t].autocomplete.options):o.fields[t].autocomplete.options.slice()}))},e.prototype._filterValues=function(e,t){var o=e.toLowerCase();return t.filter(function(e){return 0<=e.toLowerCase().indexOf(o)})},e.prototype.getFormSubmitEv=function(){return this.formSubmitEv},e.prototype.send=function(){var e;if(this.form.updateValueAndValidity(),"INVALID"!==this.form.status)this.dialogRef.close(this.form.value);else for(e in this.form.controls)this.form.controls.hasOwnProperty(e)&&(this.form.controls[e].markAsTouched({onlySelf:!0}),this.form.controls[e].updateValueAndValidity())},e.prototype.acClick=function(e,t){"undefined"!=typeof e.autocomplete&&"undefined"!=typeof e.autocomplete.forceSelect&&e.autocomplete.forceSelect&&(e.autocomplete.selected=t.option.value)},e.prototype.acCheckBlur=function(e){"undefined"!=typeof e.autocomplete&&"undefined"!=typeof e.autocomplete.forceSelect&&e.autocomplete.forceSelect&&(e.autocomplete.selected&&e.autocomplete.selected===this.form.controls[e.key].value||(this.form.controls[e.key].setValue(null),e.autocomplete.selected=""))},e.prototype.submitForm=function(e){this.formSubmitEv.emit(e)},e.prototype.mapValidators=function(e){var t,o,n=[];if(e)try{for(var r=function a(e){var t="function"==typeof Symbol&&e[Symbol.iterator],o=0;return t?t.call(e):{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}}}(Object.keys(e)),i=r.next();!i.done;i=r.next()){var l=i.value;"required"===l?n.push(m.Validators.required):"min"===l&&n.push(m.Validators.min(e[l]))}}catch(p){t={error:p}}finally{try{i&&!i.done&&(o=r["return"])&&o.call(r)}finally{if(t)throw t.error}}return n},e.decorators=[{type:t.Component,args:[{selector:"twa-app-prompt-dialog",styles:[".mat-error { display: block; margin: -15px 0 15px; }"],template:'\n    <h2>{{ title }}</h2>\n    <p [innerHtml]="messageHtml"></p>\n\n    <form novalidate (ngSubmit)="onSubmit(form.value)" [formGroup]="form" fxLayout="row wrap" fxLayoutGap="10px">\n        <div *ngFor="let prop of fields" fxFlex="{{prop.fxFlex ? (\'calc(\' + prop.fxFlex + \' - 10px)\') : \'100%\'}}" fxLayout="column">\n            <div [ngSwitch]="prop.type" fxFlex="100%">\n                <div *ngSwitchCase="\'text\'">\n                    <mat-form-field *ngIf="!prop.autocomplete" fxFlex>\n                        <input matInput placeholder="{{prop.label}}"\n                            [formControlName]="prop.key"\n                            [id]="prop.key" [type]="prop.type" fxFlex>\n                    </mat-form-field>\n                    <div *ngIf="prop.autocomplete" fxFlex>\n                        <mat-form-field fxFlex>\n                            <input matInput placeholder="{{prop.label}}"\n                                [formControlName]="prop.key"\n                                [matAutocomplete]="auto"\n                                (blur)="acCheckBlur(prop)"\n                                [id]="prop.key" [type]="prop.type">\n                        </mat-form-field>\n                        <mat-autocomplete #auto="matAutocomplete"\n                            (optionSelected)="acClick(prop, $event)">\n                            <mat-option *ngFor="let option of prop.autocomplete.filteredOptions | async"\n                                [value]="option">\n                            {{ option }}\n                            </mat-option>\n                        </mat-autocomplete>\n                    </div>\n                </div>\n                <div *ngSwitchCase="\'textarea\'">\n                    <mat-form-field fxFlex>\n                        <textarea matInput placeholder="{{prop.label}}" rows="{{prop.rows||\'3\'}}" autosize\n                            [formControlName]="prop.key"\n                            [id]="prop.key" [type]="prop.type"></textarea>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'number\'">\n                    <mat-form-field fxFlex>\n                        <input matInput placeholder="{{prop.label}}"\n                            [formControlName]="prop.key"\n                            [id]="prop.key" [type]="prop.type">\n                   </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'date\'">\n                    <mat-form-field fxFlex>\n                        <input matInput [matDatepicker]=picker placeholder="{{prop.label}}"\n                            [formControlName]="prop.key"\n                            [id]="prop.key">\n                        <mat-datepicker #picker></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'time\'">\n                    <mat-form-field fxFlex>\n                        <input matInput [ngxTimepicker]="tpicker" placeholder="{{prop.label}}"\n                            [format]="24"\n                            [formControlName]="prop.key"\n                            [id]="prop.key">\n                        <ngx-material-timepicker #tpicker></ngx-material-timepicker>\n                    </mat-form-field>\n                </div>\n\n                <div *ngSwitchCase="\'radio\'" fxLayout="column">\n                    <div _ngcontent-c20="" style="height: 20px;">\n                        <label _ngcontent-c20="" style="transform: translateY(-1.28125em) scale(0.75)\n                                perspective(100px)\n                                translateZ(0.001px);\n                                -ms-transform: translateY(-1.28125em)\n                                scale(0.75);width: 133.33333333%;margin: 20px 0 0 0;font-weight: 100;color: #666;">\n                            {{prop.label}}\n                        </label>\n                    </div>\n                    <mat-radio-group [formControlName]="prop.key" [name]="prop.key" fxLayout="column" style="margin-top: 14px;">\n                        <mat-radio-button [value]="option.value" *ngFor="let option of prop.options">\n                            {{option.label}}\n                        </mat-radio-button>\n                    </mat-radio-group>\n                </div>\n\n                <div *ngSwitchCase="\'select\'">\n                    <mat-form-field fxFlex>\n                        <mat-select [formControlName]="prop.key" placeholder="{{prop.label}}">\n                            <mat-option *ngFor="let option of prop.options" [value]="option.value">\n                                {{ option.label }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class="error" *ngIf="form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)" fxFlex="100%">\n                <mat-error *ngIf="form.get(prop.key).errors.required">\n                    El campo {{ prop.label }} es obligatorio.\n                </mat-error>\n            </div>\n        </div>\n    </form>\n\n    <button type="button" mat-raised-button\n        (click)="send()">{{ okText }}</button>\n    <button type="button" mat-button\n        (click)="dialogRef.close(false)">{{ cancelText }}</button>\n\n    '}]}],e.ctorParameters=function(){return[{type:o.MatDialogRef}]},e}(),x=function(){function e(e,t){this.dialog=e,this._sanitizer=t}return e.prototype.confirm=function(e,t,o,n){var r;return(r=this.dialog.open(g)).componentInstance.title=e,r.componentInstance.message=t,r.componentInstance.messageHtml=this._sanitizer.bypassSecurityTrustHtml(t),r.componentInstance.okText=o||"Aceptar",r.componentInstance.cancelText=n||"",r.afterClosed()},e.prototype.prompt=function(e,t,o,n,r){var a;return(a=this.dialog.open(y)).componentInstance.title=e,a.componentInstance.message=t,a.componentInstance.messageHtml=this._sanitizer.bypassSecurityTrustHtml(t),a.componentInstance.fields=o,a.componentInstance.okText=n||"Aceptar",a.componentInstance.cancelText=r||"Cancelar",a.afterClosed()},e.decorators=[{type:t.NgModule,args:[{imports:[r.CommonModule,a.FlexLayoutModule,o.MatDialogModule,o.MatButtonModule,m.FormsModule,m.ReactiveFormsModule,i.MatInputModule,l.MatCheckboxModule,p.MatSelectModule,u.MatRadioModule,c.MatDatepickerModule,o.MatNativeDateModule,s.MatAutocompleteModule,f.NgxMaterialTimepickerModule.forRoot()],declarations:[g,y],exports:[g,y],entryComponents:[g,y],providers:[e,g,y]}]},{type:t.Injectable}],e.ctorParameters=function(){return[{type:o.MatDialog},{type:d.DomSanitizer}]},e}();e.TWADialogsModule=x,e.TWAConfirmDialogComponent=g,e.TWAPromptDialogComponent=y,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=twa-md2-dialogs.umd.min.js.map