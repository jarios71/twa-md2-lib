{
  "version": 3,
  "file": "ngx-material-timepicker.js",
  "sources": [
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.module.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/focus-anchor.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/overlay.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/ngx-timepicker.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/time-formatter.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/time-adapter.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-format.enum.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-period.enum.ts"
  ],
  "sourcesContent": [
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\r\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\r\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\r\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {OverlayDirective} from './directives/overlay.directive';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {FocusAnchorDirective} from './directives/focus-anchor.directive';\r\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepicker12HoursFaceComponent} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {NgxMaterialTimepicker24HoursFaceComponent} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        FocusAnchorDirective,\r\n        NgxMaterialTimepickerToggleIconDirective\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\r\n        }\r\n    }\r\n}\r\n",
    "import {AfterContentInit, Component, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFaceComponent} from '../timepicker-hours-face/ngx-material-timepicker-hours-face.component';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    template: `<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\" [format]=\"format\"\r\n                              (timeChange)=\"hourChange.next($event)\"></ngx-material-timepicker-face>\r\n`\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFaceComponent implements AfterContentInit {\r\n\r\n    @Input() format: number;\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    get disabledHours(): ClockFaceTime[] {\r\n        if (this.minTime || this.maxTime) {\r\n\r\n            return this.hoursList.map(value => {\r\n                const currentTime = moment().hour(+value.time);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: currentTime.isBefore(this.minTime || null, 'hours')\r\n                    || currentTime.isAfter(this.maxTime || null, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return this.hoursList;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = this.disabledHours;\r\n    }\r\n}\r\n",
    "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFaceComponent} from '../timepicker-hours-face/ngx-material-timepicker-hours-face.component';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    template: `<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\"\r\n                              (timeChange)=\"hourChange.next($event)\"></ngx-material-timepicker-face>\r\n`\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFaceComponent implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    get disabledHours(): ClockFaceTime[] {\r\n        if (this.minTime || this.maxTime) {\r\n\r\n            return this.hoursList.map(value => {\r\n                const currentHour = this.period === TimePeriod.AM ? +value.time : +value.time + 12;\r\n                const hour = this.period === TimePeriod.AM && currentHour === 12 ? 0 : currentHour;\r\n                const currentTime = moment().hour(hour);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: currentTime.isBefore(this.minTime || null, 'hours')\r\n                    || currentTime.isAfter(this.maxTime || null, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return this.hoursList;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = this.disabledHours;\r\n        }\r\n    }\r\n}\r\n",
    "import {EventEmitter, HostListener, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\n\r\n\r\nexport abstract class NgxMaterialTimepickerHoursFaceComponent {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<null>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    constructor(hours: number) {\r\n        this.initHours(hours);\r\n    }\r\n\r\n    abstract get disabledHours(): ClockFaceTime[]\r\n\r\n    @HostListener('touchend')\r\n    @HostListener('click')\r\n    onClick() {\r\n        this.hourSelected.next();\r\n    }\r\n\r\n    initHours(hours: number): void {\r\n        const angleStep = 30;\r\n\r\n        this.hoursList = Array(hours).fill(1).map((v, i) => {\r\n            const time = v + i;\r\n            return {time: time === 24 ? '00' : time, angle: angleStep * time};\r\n        });\r\n    }\r\n}\r\n",
    "import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    template: `<button class=\"ngx-material-timepicker-toggle\" (click)=\"open($event)\" [disabled]=\"disabled\" type=\"button\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" *ngIf=\"!customIcon\">\r\n        <path\r\n            d=\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"/>\r\n    </svg>\r\n\r\n    <ng-content select=\"[ngxMaterialTimepickerToggleIcon]\"></ng-content>\r\n</button>\r\n`,\r\n    styles: [`.ngx-material-timepicker-toggle{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:4px;background-color:transparent;border-radius:50%;text-align:center;border:none;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color .3s;transition:background-color .3s;cursor:pointer}.ngx-material-timepicker-toggle:focus{background-color:rgba(0,0,0,.07)}`]\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n",
    "import {Directive} from '@angular/core';\r\n\r\n//To override a default toggle icon\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n",
    "import {AfterViewInit, Directive, ElementRef, Inject, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[focusAnchor]'\r\n})\r\nexport class FocusAnchorDirective implements AfterViewInit, OnDestroy {\r\n\r\n    private activeElement: HTMLElement;\r\n    private element: HTMLElement;\r\n\r\n    constructor(@Optional() @Inject(DOCUMENT) private document: any,\r\n                elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.activeElement = <HTMLElement>this.document.activeElement;\r\n        // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => this.element.focus());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => this.activeElement.focus());\r\n    }\r\n}\r\n",
    "import {Directive, HostListener} from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService,} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.eventService.backdropClickSubject.next(e);\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n",
    "import {\r\n    Directive,\r\n    ElementRef,\r\n    forwardRef,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {Moment} from 'moment';\r\nimport {TimeAdapter} from '../services/time-adapter';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n    onTouched = () => {\r\n    };\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    private onChange: (value: any) => void = () => {\r\n    };\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n\r\n    private _format: number;\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    private _min: string | Moment;\r\n\r\n    get min(): string | Moment {\r\n        return this._min;\r\n    }\r\n\r\n    @Input()\r\n    set min(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    private _max: string | Moment;\r\n\r\n    get max(): string | Moment {\r\n        return this._max;\r\n    }\r\n\r\n    @Input()\r\n    set max(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    private _value: string;\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        this._value = TimeAdapter.formatTime(value, this._format);\r\n\r\n        if (this.isValueAvailableToUpdate()) {\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        if (this.isValueAvailableToUpdate()) {\r\n            this._timepicker.setDefaultTime(TimeAdapter.formatTime(time, this._format));\r\n        }\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this._value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this._value;\r\n    }\r\n\r\n    private isValueAvailableToUpdate(): boolean {\r\n        const isAfter = this._min && TimeAdapter.convertTimeToMoment(this._value).isAfter(this._min);\r\n        const isBefore = this._max && TimeAdapter.convertTimeToMoment(this._value).isBefore(this._max);\r\n        const isBetween = (this._min && this._max)\r\n            && TimeAdapter.convertTimeToMoment(this._value).isBetween(this._min, this._max, 'minutes');\r\n        const isAvailable = !this._min && !this._max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n}\r\n\r\n",
    "import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    template: `<button class=\"timepicker-button\" type=\"button\">\r\n  <span><ng-content></ng-content></span>\r\n</button>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;color:#00bfff;text-align:center;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1);transition:all 450ms cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;cursor:pointer;outline:0}.timepicker-button:focus,.timepicker-button:hover{background-color:rgba(153,153,153,.2)}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:Roboto,sans-serif}`]\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport {TimeUnit} from '../models/time-unit.enum';\r\n\r\n@Pipe({\r\n\tname: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n\ttransform(time: number, timeUnit: TimeUnit): any {\r\n\t\tif (!time) {\r\n\t\t\treturn time;\r\n\t\t}\r\n\t\tswitch (timeUnit) {\r\n\t\t\tcase TimeUnit.HOUR:\r\n\t\t\t\treturn moment.utc(time * 3600 * 1000).format('HH');\r\n\t\t\tcase TimeUnit.MINUTE:\r\n\t\t\t\treturn moment.utc(time * 60 * 1000).format('mm');\r\n\t\t}\r\n\t}\r\n\r\n}\r\n",
    "import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    template: `<div class=\"clock-face\" #clockFace>\r\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\" class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n             *ngFor=\"let time of faceTime.slice(0, 12); trackBy: trackByTime\">\r\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n                  [ngClass]=\"{'active': (time.time === selectedTime.time) && !isClockFaceDisabled, 'disabled': time.disabled}\">{{time.time}}</span>\r\n        </div>\r\n        <div class=\"clock-face__inner\" *ngIf=\"faceTime.length > 12\"\r\n             [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\">\r\n            <div class=\"clock-face__number clock-face__number--inner\"\r\n                 [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n                 [style.height.px]=\"innerClockFaceSize\"\r\n                 *ngFor=\"let time of faceTime.slice(12, 24); trackBy: trackByTime\">\r\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n                  [ngClass]=\"{'active': (time.time === selectedTime.time) && !isClockFaceDisabled, 'disabled': time.disabled}\">\r\n                {{time.time}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <span class=\"clock-face__clock-hand\" [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n          #clockHand [hidden]=\"isClockFaceDisabled\"></span>\r\n</div>\r\n<ng-template #minutesFace>\r\n    <div class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\r\n\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n          [ngClass]=\"{'active': ((selectedTime.time === time.time) && time.time % 5 === 0) && !isClockFaceDisabled, 'disabled': time.disabled}\">\r\n\t{{time.time % 5 === 0 ? time.time : ''}}</span>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.clock-face{width:290px;height:290px;border-radius:50%;background-color:#f0f0f0;position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:20px;-webkit-box-sizing:border-box;box-sizing:border-box}.clock-face__inner{position:absolute}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;-webkit-transform-origin:0 100%;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px;color:#6c6c6c}.clock-face__number--inner>span{font-size:14px;color:#929292}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}.clock-face__number>span.active{background-color:#00bfff;color:#fff}.clock-face__number>span.disabled{color:#c5c5c5}.clock-face__clock-hand{height:103px;width:2px;background-color:#00bfff;-webkit-transform-origin:0 100%;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:#00bfff;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border:4px solid #00bfff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);-webkit-box-sizing:content-box;box-sizing:content-box}@media (max-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number--outer{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute:before{top:0}}`]\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ((changes['faceTime'] && changes['faceTime'].currentValue)\r\n            && (changes['selectedTime'] && changes['selectedTime'].currentValue)) {\r\n            //Set time according to passed an input value\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (changes['selectedTime'] && changes['selectedTime'].currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (changes['faceTime'] && changes['faceTime'].currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('touchstart', ['$event'])\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        //Get x0 and y0 of the circle\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        //Counting the arctangent and convert it to from radian to deg\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        //Get angle according to quadrant\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        //Check if selected time from the inner clock face (24 hours format only)\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        //Round angle according to angle step\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\r\n\r\n        if (!selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('touchend', ['$event'])\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24 ) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === '00') {\r\n                this.decreaseClockHand();\r\n            } else if (this.selectedTime.time <= 12) {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        //Detect whether time from the inner clock face or not (24 format only)\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    const roundedAngle = Math.round(angle / step) * step;\r\n    return roundedAngle === 0 ? 360 : roundedAngle;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n",
    "import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport * as _moment from 'moment';\r\nimport {Moment} from 'moment';\r\n\r\nconst moment = _moment;\r\nconst MINUTES = 60;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    template: `<ngx-material-timepicker-face [faceTime]=\"minutesList\" [selectedTime]=\"selectedMinute\"\r\n                              (timeChange)=\"minuteChange.next($event)\" [unit]=\"timeUnit.MINUTE\"></ngx-material-timepicker-face>\r\n`\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n\r\n    @Input()\r\n    set selectedHour(value: number) {\r\n        this._selectedHour = value === 12 ? 0 : value;\r\n    }\r\n\r\n    private _selectedHour: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    constructor() {\r\n        const angleStep = 360 / MINUTES;\r\n        this.minutesList = Array(MINUTES).fill(0).map((v, i) => {\r\n            const index = (v + i);\r\n            const angle = angleStep * index;\r\n            return {time: index === 0 ? '00' : index, angle: angle !== 0 ? angle : 360};\r\n        });\r\n    }\r\n\r\n    private get disabledMinutes(): ClockFaceTime[] {\r\n        if (this.minTime || this.maxTime) {\r\n\r\n            return this.minutesList.map(value => {\r\n                const hour = this.period === TimePeriod.AM ? this._selectedHour : this._selectedHour + 12;\r\n                const currentTime = moment().hour(hour).minute(+value.time);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: currentTime.isBefore(this.minTime || null, 'minutes')\r\n                    || currentTime.isAfter(this.maxTime || null, 'minutes')\r\n                };\r\n            })\r\n        }\r\n        return this.minutesList;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.minutesList = this.disabledMinutes;\r\n        }\r\n    }\r\n}\r\n\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n\tname: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n\tconstructor(private domSanitizer: DomSanitizer) {\r\n\t}\r\n\r\n\ttransform(value: string): any {\r\n\t\tif (!value) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\treturn this.domSanitizer.bypassSecurityTrustStyle(value);\r\n\t}\r\n\r\n}\r\n",
    "import {Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport {TimePeriod} from './models/time-period.enum';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {TimeUnit} from './models/time-unit.enum';\r\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {filter} from 'rxjs/operators';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {Moment} from 'moment';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    template: `<div class=\"timepicker-backdrop-overlay\" *ngIf=\"isOpened\" overlay></div>\r\n<div class=\"timepicker-overlay\" *ngIf=\"isOpened\">\r\n    <div class=\"timepicker\" [@timepicker]=\"animationState\" (@timepicker.done)=\"animationDone($event)\" tabindex=\"0\"\r\n         focusAnchor>\r\n        <header class=\"timepicker__header\">\r\n            <div class=\"timepicker-dial\">\r\n                <div class=\"timepicker-dial__time\">\r\n\t\t\t\t<span class=\"timepicker-dial__item\"\r\n                      [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.HOUR}\"\r\n                      (click)=\"changeTimeUnit(timeUnit.HOUR)\">\r\n\t\t\t\t\t{{selectedHour?.time | timeFormatter: timeUnit.HOUR}}</span>:<span\r\n                    class=\"timepicker-dial__item\"\r\n                    [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.MINUTE}\"\r\n                    (click)=\"changeTimeUnit(timeUnit.MINUTE)\">{{selectedMinute?.time | timeFormatter: timeUnit.MINUTE}}</span>\r\n                </div>\r\n                <div class=\"timepicker-dial__period\" *ngIf=\"format !== 24\">\r\n\t\t\t<span class=\"timepicker-dial__item\"\r\n                  [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\"\r\n                  (click)=\"changePeriod(timePeriod.AM)\">AM</span>\r\n                    <span class=\"timepicker-dial__item\"\r\n                          [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\"\r\n                          (click)=\"changePeriod(timePeriod.PM)\">PM</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div class=\"timepicker__main-content\">\r\n            <div class=\"timepicker__body\" [ngSwitch]=\"activeTimeUnit\">\r\n                <div *ngSwitchCase=\"timeUnit.HOUR\">\r\n                    <ngx-material-timepicker-24-hours-face *ngIf=\"format === 24;else ampmHours\"\r\n                                                           (hourChange)=\"onHourChange($event)\"\r\n                                                           [selectedHour]=\"selectedHour\"\r\n                                                           [minTime]=\"minTime\"\r\n                                                           [maxTime]=\"maxTime\"\r\n                                                           [format]=\"format\"\r\n                                                           (hourSelected)=\"activeTimeUnit = timeUnit.MINUTE\"></ngx-material-timepicker-24-hours-face>\r\n                    <ng-template #ampmHours>\r\n                        <ngx-material-timepicker-12-hours-face\r\n                            (hourChange)=\"onHourChange($event)\"\r\n                            [selectedHour]=\"selectedHour\"\r\n                            [period]=\"selectedPeriod\"\r\n                            [minTime]=\"minTime\"\r\n                            [maxTime]=\"maxTime\"\r\n                            (hourSelected)=\"activeTimeUnit = timeUnit.MINUTE\"></ngx-material-timepicker-12-hours-face>\r\n                    </ng-template>\r\n                </div>\r\n                <ngx-material-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                      [selectedMinute]=\"selectedMinute\"\r\n                                                      [selectedHour]=\"selectedHour?.time\"\r\n                                                      [minTime]=\"minTime\"\r\n                                                      [maxTime]=\"maxTime\"\r\n                                                      [period]=\"selectedPeriod\"\r\n                                                      (minuteChange)=\"onMinuteChange($event)\"></ngx-material-timepicker-minutes-face>\r\n            </div>\r\n            <div class=\"timepicker__actions\">\r\n                <div (click)=\"close()\">\r\n                    <ng-container *ngTemplateOutlet=\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n                </div>\r\n                <div (click)=\"setTime()\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #cancelBtnDefault>\r\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:rgba(0,0,0,.3);z-index:999;pointer-events:auto}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;-webkit-box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;outline:0;position:static;z-index:999;pointer-events:auto}.timepicker__header{background-color:#00bfff;padding:15px 30px}.timepicker__body{background-color:#fff;padding:15px 5px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__actions{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:15px;background-color:#fff}.timepicker-dial{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{line-height:normal;font-size:50px;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__period{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-left:10px;font-size:18px;font-weight:500;font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}@media (max-width:1023px) and (orientation:landscape){.timepicker{display:-webkit-box;display:-ms-flexbox;display:flex;width:515px}.timepicker__header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__main-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}.timepicker-dial{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.timepicker-dial__period{margin-left:0}}`],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timePeriod = TimePeriod;\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    timepickerInput: TimepickerDirective;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() closed = new EventEmitter<null>();\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime() {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.defaultTime = time;\r\n    }\r\n\r\n    open() {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n    }\r\n\r\n    close() {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.keydownEventSubject.next(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {Subject, Observable} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\nimport * as moment_ from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimeAdapter} from './time-adapter';\r\n\r\nconst moment = moment_;\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: '00',\r\n    angle: 360\r\n};\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        this.periodSubject.next(period);\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n    set defaultTime(time: string) {\r\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\r\n\r\n        if (moment(defaultTime).isValid()) {\r\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours() === 0 ? '00' : defaultTime.getHours()};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes() === 0 ? '00' : defaultTime.getMinutes()};\r\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = this.periodSubject.getValue();\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n",
    "import * as _moment from 'moment';\r\nimport {Moment} from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\n\r\nconst moment = _moment;\r\n\r\nexport class TimeAdapter {\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        return moment(time, timeFormat).format(timeFormat);\r\n    }\r\n\r\n    static convertTimeToMoment(time: string): Moment {\r\n        return moment(time, TimeFormat.TWELVE);\r\n    }\r\n\r\n}\r\n",
    "export enum TimeFormat {\r\n\tTWELVE = 'hh:mm a',\r\n\tTWENTY_FOUR = 'HH:mm'\r\n}\r\n",
    "export enum TimePeriod {\r\n\tAM = 'AM',\r\n\tPM = 'PM'\r\n}\r\n"
  ],
  "names": [
    "moment",
    "tslib_1.__extends",
    "moment.utc",
    "moment_"
  ],
  "mappings": "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"
}
