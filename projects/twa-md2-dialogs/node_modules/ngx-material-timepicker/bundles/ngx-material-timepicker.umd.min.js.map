{
  "version": 3,
  "file": "ngx-material-timepicker.umd.min.js",
  "sources": [
    "ng://ngx-material-timepicker/node_modules/tslib/tslib.es6.js",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-period.enum.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/models/time-format.enum.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/time-adapter.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/services/ngx-material-timepicker-event.service.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/pipes/time-formatter.pipe.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/ngx-timepicker.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/overlay.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/focus-anchor.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts",
    "ng://ngx-material-timepicker/out/src/app/material-timepicker/ngx-material-timepicker.module.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "export enum TimePeriod {\r\n\tAM = 'AM',\r\n\tPM = 'PM'\r\n}\r\n",
    "export enum TimeFormat {\r\n\tTWELVE = 'hh:mm a',\r\n\tTWENTY_FOUR = 'HH:mm'\r\n}\r\n",
    "import * as _moment from 'moment';\r\nimport {Moment} from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\n\r\nconst moment = _moment;\r\n\r\nexport class TimeAdapter {\r\n\r\n    static formatTime(time: string, format = 12): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n        return moment(time, timeFormat).format(timeFormat);\r\n    }\r\n\r\n    static convertTimeToMoment(time: string): Moment {\r\n        return moment(time, TimeFormat.TWELVE);\r\n    }\r\n\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {ClockFaceTime} from '../models/clock-face-time.interface';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TimePeriod} from '../models/time-period.enum';\r\nimport * as moment_ from 'moment';\r\nimport {TimeFormat} from '../models/time-format.enum';\r\nimport {TimeAdapter} from './time-adapter';\r\n\r\nconst moment = moment_;\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: '00',\r\n    angle: 360\r\n};\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        this.periodSubject.next(period);\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n    set defaultTime(time: string) {\r\n        const defaultTime = moment(time, TimeFormat.TWENTY_FOUR).toDate();\r\n\r\n        if (moment(defaultTime).isValid()) {\r\n            this.hour = {...DEFAULT_HOUR, time: defaultTime.getHours() === 0 ? '00' : defaultTime.getHours()};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes() === 0 ? '00' : defaultTime.getMinutes()};\r\n            this.period = <TimePeriod>time.substr(time.length - 2).toUpperCase();\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = this.periodSubject.getValue();\r\n\r\n        return TimeAdapter.formatTime(`${hour}:${minute} ${period}`, format);\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n",
    "import {Injectable} from '@angular/core';\r\nimport {Subject, Observable} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class NgxMaterialTimepickerEventService {\r\n\r\n    backdropClickSubject: Subject<MouseEvent> = new Subject();\r\n    keydownEventSubject: Subject<KeyboardEvent> = new Subject();\r\n\r\n    get backdropClick(): Observable<MouseEvent> {\r\n        return this.backdropClickSubject.asObservable();\r\n    }\r\n\r\n    get keydownEvent(): Observable<KeyboardEvent> {\r\n        return this.keydownEventSubject.asObservable();\r\n    }\r\n\r\n}\r\n",
    "import {Component, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output, TemplateRef} from '@angular/core';\r\nimport {ClockFaceTime} from './models/clock-face-time.interface';\r\nimport {TimePeriod} from './models/time-period.enum';\r\nimport {merge, Subscription} from 'rxjs';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {TimeUnit} from './models/time-unit.enum';\r\nimport {animate, AnimationEvent, style, transition, trigger} from '@angular/animations';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {filter} from 'rxjs/operators';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {Moment} from 'moment';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    template: `<div class=\"timepicker-backdrop-overlay\" *ngIf=\"isOpened\" overlay></div>\r\n<div class=\"timepicker-overlay\" *ngIf=\"isOpened\">\r\n    <div class=\"timepicker\" [@timepicker]=\"animationState\" (@timepicker.done)=\"animationDone($event)\" tabindex=\"0\"\r\n         focusAnchor>\r\n        <header class=\"timepicker__header\">\r\n            <div class=\"timepicker-dial\">\r\n                <div class=\"timepicker-dial__time\">\r\n\t\t\t\t<span class=\"timepicker-dial__item\"\r\n                      [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.HOUR}\"\r\n                      (click)=\"changeTimeUnit(timeUnit.HOUR)\">\r\n\t\t\t\t\t{{selectedHour?.time | timeFormatter: timeUnit.HOUR}}</span>:<span\r\n                    class=\"timepicker-dial__item\"\r\n                    [ngClass]=\"{'timepicker-dial__item_active': activeTimeUnit === timeUnit.MINUTE}\"\r\n                    (click)=\"changeTimeUnit(timeUnit.MINUTE)\">{{selectedMinute?.time | timeFormatter: timeUnit.MINUTE}}</span>\r\n                </div>\r\n                <div class=\"timepicker-dial__period\" *ngIf=\"format !== 24\">\r\n\t\t\t<span class=\"timepicker-dial__item\"\r\n                  [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.AM}\"\r\n                  (click)=\"changePeriod(timePeriod.AM)\">AM</span>\r\n                    <span class=\"timepicker-dial__item\"\r\n                          [ngClass]=\"{'timepicker-dial__item_active': selectedPeriod === timePeriod.PM}\"\r\n                          (click)=\"changePeriod(timePeriod.PM)\">PM</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div class=\"timepicker__main-content\">\r\n            <div class=\"timepicker__body\" [ngSwitch]=\"activeTimeUnit\">\r\n                <div *ngSwitchCase=\"timeUnit.HOUR\">\r\n                    <ngx-material-timepicker-24-hours-face *ngIf=\"format === 24;else ampmHours\"\r\n                                                           (hourChange)=\"onHourChange($event)\"\r\n                                                           [selectedHour]=\"selectedHour\"\r\n                                                           [minTime]=\"minTime\"\r\n                                                           [maxTime]=\"maxTime\"\r\n                                                           [format]=\"format\"\r\n                                                           (hourSelected)=\"activeTimeUnit = timeUnit.MINUTE\"></ngx-material-timepicker-24-hours-face>\r\n                    <ng-template #ampmHours>\r\n                        <ngx-material-timepicker-12-hours-face\r\n                            (hourChange)=\"onHourChange($event)\"\r\n                            [selectedHour]=\"selectedHour\"\r\n                            [period]=\"selectedPeriod\"\r\n                            [minTime]=\"minTime\"\r\n                            [maxTime]=\"maxTime\"\r\n                            (hourSelected)=\"activeTimeUnit = timeUnit.MINUTE\"></ngx-material-timepicker-12-hours-face>\r\n                    </ng-template>\r\n                </div>\r\n                <ngx-material-timepicker-minutes-face *ngSwitchCase=\"timeUnit.MINUTE\"\r\n                                                      [selectedMinute]=\"selectedMinute\"\r\n                                                      [selectedHour]=\"selectedHour?.time\"\r\n                                                      [minTime]=\"minTime\"\r\n                                                      [maxTime]=\"maxTime\"\r\n                                                      [period]=\"selectedPeriod\"\r\n                                                      (minuteChange)=\"onMinuteChange($event)\"></ngx-material-timepicker-minutes-face>\r\n            </div>\r\n            <div class=\"timepicker__actions\">\r\n                <div (click)=\"close()\">\r\n                    <ng-container *ngTemplateOutlet=\"cancelBtnTmpl ? cancelBtnTmpl : cancelBtnDefault\"></ng-container>\r\n                </div>\r\n                <div (click)=\"setTime()\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"confirmBtnTmpl ? confirmBtnTmpl : confirmBtnDefault\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #cancelBtnDefault>\r\n    <ngx-material-timepicker-button>Cancel</ngx-material-timepicker-button>\r\n</ng-template>\r\n<ng-template #confirmBtnDefault>\r\n    <ngx-material-timepicker-button>Ok</ngx-material-timepicker-button>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-backdrop-overlay{position:fixed;top:0;bottom:0;right:0;left:0;background-color:rgba(0,0,0,.3);z-index:999;pointer-events:auto}.timepicker-overlay{position:fixed;top:0;left:0;width:100%;height:100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;z-index:999;pointer-events:none}.timepicker{width:300px;border-radius:2px;-webkit-box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;box-shadow:rgba(0,0,0,.25) 0 14px 45px,rgba(0,0,0,.22) 0 10px 18px;outline:0;position:static;z-index:999;pointer-events:auto}.timepicker__header{background-color:#00bfff;padding:15px 30px}.timepicker__body{background-color:#fff;padding:15px 5px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__actions{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;padding:15px;background-color:#fff}.timepicker-dial{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;-webkit-tap-highlight-color:transparent}.timepicker-dial__time{line-height:normal;font-size:50px;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__period{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;margin-left:10px;font-size:18px;font-weight:500;font-family:Roboto,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.timepicker-dial__item{cursor:pointer;color:rgba(255,255,255,.5);font-family:Roboto,sans-serif}.timepicker-dial__item_active{color:#fff}@media (max-width:1023px) and (orientation:landscape){.timepicker{display:-webkit-box;display:-ms-flexbox;display:flex;width:515px}.timepicker__header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.timepicker__main-content{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;width:100%}.timepicker__actions{padding:5px;margin-top:-1px}.timepicker-dial{-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column}.timepicker-dial__period{margin-left:0}}`],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerComponent implements OnInit, OnDestroy {\r\n\r\n    selectedHour: ClockFaceTime;\r\n    selectedMinute: ClockFaceTime;\r\n    selectedPeriod: TimePeriod;\r\n\r\n    timePeriod = TimePeriod;\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    isOpened = false;\r\n    animationState: AnimationState;\r\n\r\n    timepickerInput: TimepickerDirective;\r\n\r\n    subscriptions: Subscription[] = [];\r\n\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() closed = new EventEmitter<null>();\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                private eventService: NgxMaterialTimepickerEventService) {\r\n\r\n        this.subscriptions.push(merge(this.eventService.backdropClick,\r\n            this.eventService.keydownEvent.pipe(filter(e => e.keyCode === ESCAPE && this.isEsc)))\r\n            .subscribe(() => this.close()));\r\n\r\n    }\r\n\r\n    get minTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.min;\r\n    }\r\n\r\n    get maxTime(): string | Moment {\r\n        return this.timepickerInput && this.timepickerInput.max;\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput && this.timepickerInput.format;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.subscriptions.push(this.timepickerService.selectedHour\r\n            .subscribe(hour => this.selectedHour = hour));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedMinute\r\n            .subscribe(minute => this.selectedMinute = minute));\r\n\r\n        this.subscriptions.push(this.timepickerService.selectedPeriod\r\n            .subscribe(period => this.selectedPeriod = period));\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n        this.timepickerInput = input;\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit) {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime() {\r\n        this.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    setDefaultTime(time: string): void {\r\n        this.timepickerService.defaultTime = time;\r\n    }\r\n\r\n    open() {\r\n        this.isOpened = true;\r\n        this.animationState = AnimationState.ENTER;\r\n    }\r\n\r\n    close() {\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.isOpened = false;\r\n            this.activeTimeUnit = TimeUnit.HOUR;\r\n            this.closed.next();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeydown(e: KeyboardEvent) {\r\n        this.eventService.keydownEventSubject.next(e);\r\n        e.stopPropagation();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    }\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n\tname: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n\tconstructor(private domSanitizer: DomSanitizer) {\r\n\t}\r\n\r\n\ttransform(value: string): any {\r\n\t\tif (!value) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\treturn this.domSanitizer.bypassSecurityTrustStyle(value);\r\n\t}\r\n\r\n}\r\n",
    "import {Component, EventEmitter, Input, OnChanges, Output, SimpleChanges} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport * as _moment from 'moment';\r\nimport {Moment} from 'moment';\r\n\r\nconst moment = _moment;\r\nconst MINUTES = 60;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    template: `<ngx-material-timepicker-face [faceTime]=\"minutesList\" [selectedTime]=\"selectedMinute\"\r\n                              (timeChange)=\"minuteChange.next($event)\" [unit]=\"timeUnit.MINUTE\"></ngx-material-timepicker-face>\r\n`\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n\r\n    @Input()\r\n    set selectedHour(value: number) {\r\n        this._selectedHour = value === 12 ? 0 : value;\r\n    }\r\n\r\n    private _selectedHour: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    constructor() {\r\n        const angleStep = 360 / MINUTES;\r\n        this.minutesList = Array(MINUTES).fill(0).map((v, i) => {\r\n            const index = (v + i);\r\n            const angle = angleStep * index;\r\n            return {time: index === 0 ? '00' : index, angle: angle !== 0 ? angle : 360};\r\n        });\r\n    }\r\n\r\n    private get disabledMinutes(): ClockFaceTime[] {\r\n        if (this.minTime || this.maxTime) {\r\n\r\n            return this.minutesList.map(value => {\r\n                const hour = this.period === TimePeriod.AM ? this._selectedHour : this._selectedHour + 12;\r\n                const currentTime = moment().hour(hour).minute(+value.time);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: currentTime.isBefore(this.minTime || null, 'minutes')\r\n                    || currentTime.isAfter(this.maxTime || null, 'minutes')\r\n                };\r\n            })\r\n        }\r\n        return this.minutesList;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.minutesList = this.disabledMinutes;\r\n        }\r\n    }\r\n}\r\n\r\n",
    "import {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {TimeUnit} from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    template: `<div class=\"clock-face\" #clockFace>\r\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\" class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n             *ngFor=\"let time of faceTime.slice(0, 12); trackBy: trackByTime\">\r\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n                  [ngClass]=\"{'active': (time.time === selectedTime.time) && !isClockFaceDisabled, 'disabled': time.disabled}\">{{time.time}}</span>\r\n        </div>\r\n        <div class=\"clock-face__inner\" *ngIf=\"faceTime.length > 12\"\r\n             [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\">\r\n            <div class=\"clock-face__number clock-face__number--inner\"\r\n                 [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n                 [style.height.px]=\"innerClockFaceSize\"\r\n                 *ngFor=\"let time of faceTime.slice(12, 24); trackBy: trackByTime\">\r\n\t\t\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n                  [ngClass]=\"{'active': (time.time === selectedTime.time) && !isClockFaceDisabled, 'disabled': time.disabled}\">\r\n                {{time.time}}</span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <span class=\"clock-face__clock-hand\" [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n          #clockHand [hidden]=\"isClockFaceDisabled\"></span>\r\n</div>\r\n<ng-template #minutesFace>\r\n    <div class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [style.transform]=\"'rotateZ('+ time.angle +'deg) translateX(-50%)' | styleSanitizer\"\r\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\r\n\t<span [style.transform]=\"'rotateZ(-'+ time.angle +'deg)' | styleSanitizer\"\r\n          [ngClass]=\"{'active': ((selectedTime.time === time.time) && time.time % 5 === 0) && !isClockFaceDisabled, 'disabled': time.disabled}\">\r\n\t{{time.time % 5 === 0 ? time.time : ''}}</span>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.clock-face{width:290px;height:290px;border-radius:50%;background-color:#f0f0f0;position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:20px;-webkit-box-sizing:border-box;box-sizing:border-box}.clock-face__inner{position:absolute}.clock-face__container{margin-left:-2px}.clock-face__number{position:absolute;-webkit-transform-origin:0 100%;transform-origin:0 100%;width:50px;text-align:center;z-index:2}.clock-face__number--outer{height:calc(290px / 2 - 20px)}.clock-face__number--outer>span{font-size:16px;color:#6c6c6c}.clock-face__number--inner>span{font-size:14px;color:#929292}.clock-face__number>span{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:30px;height:30px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:auto;border-radius:50%;font-weight:500;font-family:Roboto,sans-serif}.clock-face__number>span.active{background-color:#00bfff;color:#fff}.clock-face__number>span.disabled{color:#c5c5c5}.clock-face__clock-hand{height:103px;width:2px;background-color:#00bfff;-webkit-transform-origin:0 100%;transform-origin:0 100%;position:absolute;top:calc(50% - 103px);z-index:1}.clock-face__clock-hand:after{content:'';width:7px;height:7px;border-radius:50%;background-color:#00bfff;position:absolute;bottom:-3px;left:-3.5px}.clock-face__clock-hand_minute:before{content:'';width:7px;height:7px;background-color:#fff;border:4px solid #00bfff;border-radius:50%;position:absolute;top:-8px;left:calc(50% - 8px);-webkit-box-sizing:content-box;box-sizing:content-box}@media (max-width:1023px) and (orientation:landscape){.clock-face{width:225px;height:225px;padding:5px}.clock-face__number--outer{height:calc(225px / 2 - 5px)}.clock-face__clock-hand_minute:before{top:0}}`]\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    @ViewChild('clockFace') clockFace: ElementRef;\r\n    @ViewChild('clockHand') clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if ((changes['faceTime'] && changes['faceTime'].currentValue)\r\n            && (changes['selectedTime'] && changes['selectedTime'].currentValue)) {\r\n            //Set time according to passed an input value\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (changes['selectedTime'] && changes['selectedTime'].currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (changes['faceTime'] && changes['faceTime'].currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('touchstart', ['$event'])\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        //Get x0 and y0 of the circle\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        //Counting the arctangent and convert it to from radian to deg\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        //Get angle according to quadrant\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        //Check if selected time from the inner clock face (24 hours format only)\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        //Round angle according to angle step\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? 6 : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === roundedAngle);\r\n\r\n        if (!selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('touchend', ['$event'])\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24 ) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === '00') {\r\n                this.decreaseClockHand();\r\n            } else if (this.selectedTime.time <= 12) {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        //Detect whether time from the inner clock face or not (24 format only)\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    const roundedAngle = Math.round(angle / step) * step;\r\n    return roundedAngle === 0 ? 360 : roundedAngle;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n",
    "import {Pipe, PipeTransform} from '@angular/core';\r\nimport * as moment from 'moment';\r\nimport {TimeUnit} from '../models/time-unit.enum';\r\n\r\n@Pipe({\r\n\tname: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n\ttransform(time: number, timeUnit: TimeUnit): any {\r\n\t\tif (!time) {\r\n\t\t\treturn time;\r\n\t\t}\r\n\t\tswitch (timeUnit) {\r\n\t\t\tcase TimeUnit.HOUR:\r\n\t\t\t\treturn moment.utc(time * 3600 * 1000).format('HH');\r\n\t\t\tcase TimeUnit.MINUTE:\r\n\t\t\t\treturn moment.utc(time * 60 * 1000).format('mm');\r\n\t\t}\r\n\t}\r\n\r\n}\r\n",
    "import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    template: `<button class=\"timepicker-button\" type=\"button\">\r\n  <span><ng-content></ng-content></span>\r\n</button>\r\n`,\r\n    styles: [`@import url(https://fonts.googleapis.com/css?family=Roboto:400,500,700);.timepicker-button{display:inline-block;height:36px;min-width:88px;line-height:36px;border:12px;border-radius:2px;background-color:transparent;color:#00bfff;text-align:center;-webkit-transition:all 450ms cubic-bezier(.23,1,.32,1);transition:all 450ms cubic-bezier(.23,1,.32,1);overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;cursor:pointer;outline:0}.timepicker-button:focus,.timepicker-button:hover{background-color:rgba(153,153,153,.2)}.timepicker-button>span{font-size:14px;text-transform:uppercase;font-weight:600;padding-left:16px;padding-right:16px;font-family:Roboto,sans-serif}`]\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n",
    "import {\r\n    Directive,\r\n    ElementRef,\r\n    forwardRef,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    SimpleChanges\r\n} from '@angular/core';\r\nimport {NgxMaterialTimepickerComponent} from '../ngx-material-timepicker.component';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {Subscription} from 'rxjs';\r\nimport {Moment} from 'moment';\r\nimport {TimeAdapter} from '../services/time-adapter';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n    onTouched = () => {\r\n    };\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    private onChange: (value: any) => void = () => {\r\n    };\r\n\r\n    constructor(private elementRef: ElementRef) {\r\n    }\r\n\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n\r\n    private _format: number;\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    private _min: string | Moment;\r\n\r\n    get min(): string | Moment {\r\n        return this._min;\r\n    }\r\n\r\n    @Input()\r\n    set min(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    private _max: string | Moment;\r\n\r\n    get max(): string | Moment {\r\n        return this._max;\r\n    }\r\n\r\n    @Input()\r\n    set max(value: string | Moment) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.convertTimeToMoment(value);\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    private _value: string;\r\n\r\n    get value(): string {\r\n        return this._value;\r\n    }\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            return;\r\n        }\r\n        this._value = TimeAdapter.formatTime(value, this._format);\r\n\r\n        if (this.isValueAvailableToUpdate()) {\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        if (this.isValueAvailableToUpdate()) {\r\n            this._timepicker.setDefaultTime(TimeAdapter.formatTime(time, this._format));\r\n        }\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this._value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this._value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this._value;\r\n    }\r\n\r\n    private isValueAvailableToUpdate(): boolean {\r\n        const isAfter = this._min && TimeAdapter.convertTimeToMoment(this._value).isAfter(this._min);\r\n        const isBefore = this._max && TimeAdapter.convertTimeToMoment(this._value).isBefore(this._max);\r\n        const isBetween = (this._min && this._max)\r\n            && TimeAdapter.convertTimeToMoment(this._value).isBetween(this._min, this._max, 'minutes');\r\n        const isAvailable = !this._min && !this._max;\r\n\r\n        return isAfter || isBefore || isBetween || isAvailable;\r\n    }\r\n}\r\n\r\n",
    "import {Directive, HostListener} from '@angular/core';\r\nimport {NgxMaterialTimepickerEventService,} from '../services/ngx-material-timepicker-event.service';\r\n\r\n@Directive({\r\n    selector: '[overlay]'\r\n})\r\nexport class OverlayDirective {\r\n\r\n    constructor(private eventService: NgxMaterialTimepickerEventService) {\r\n    }\r\n\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(e: MouseEvent) {\r\n        this.eventService.backdropClickSubject.next(e);\r\n        e.preventDefault();\r\n    }\r\n\r\n}\r\n",
    "import {AfterViewInit, Directive, ElementRef, Inject, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[focusAnchor]'\r\n})\r\nexport class FocusAnchorDirective implements AfterViewInit, OnDestroy {\r\n\r\n    private activeElement: HTMLElement;\r\n    private element: HTMLElement;\r\n\r\n    constructor(@Optional() @Inject(DOCUMENT) private document: any,\r\n                elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.activeElement = <HTMLElement>this.document.activeElement;\r\n        // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => this.element.focus());\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n        setTimeout(() => this.activeElement.focus());\r\n    }\r\n}\r\n",
    "import {Directive} from '@angular/core';\r\n\r\n//To override a default toggle icon\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n",
    "import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    template: `<button class=\"ngx-material-timepicker-toggle\" (click)=\"open($event)\" [disabled]=\"disabled\" type=\"button\">\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24px\" height=\"24px\" *ngIf=\"!customIcon\">\r\n        <path\r\n            d=\"M 12 2 C 6.4889971 2 2 6.4889971 2 12 C 2 17.511003                   6.4889971 22 12 22 C 17.511003 22 22 17.511003 22 12 C 22 6.4889971 17.511003 2 12 2 z M 12 4 C 16.430123 4 20 7.5698774 20 12 C 20 16.430123 16.430123 20 12 20 C 7.5698774 20 4 16.430123 4 12 C 4 7.5698774 7.5698774 4 12 4 z M 11 6 L 11 12.414062 L 15.292969 16.707031 L 16.707031 15.292969 L 13 11.585938 L 13 6 L 11 6 z\"/>\r\n    </svg>\r\n\r\n    <ng-content select=\"[ngxMaterialTimepickerToggleIcon]\"></ng-content>\r\n</button>\r\n`,\r\n    styles: [`.ngx-material-timepicker-toggle{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:4px;background-color:transparent;border-radius:50%;text-align:center;border:none;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color .3s;transition:background-color .3s;cursor:pointer}.ngx-material-timepicker-toggle:focus{background-color:rgba(0,0,0,.07)}`]\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n",
    "import {EventEmitter, HostListener, Input, Output} from '@angular/core';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport {Moment} from 'moment';\r\n\r\n\r\nexport abstract class NgxMaterialTimepickerHoursFaceComponent {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: Moment;\r\n    @Input() maxTime: Moment;\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<null>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    constructor(hours: number) {\r\n        this.initHours(hours);\r\n    }\r\n\r\n    abstract get disabledHours(): ClockFaceTime[]\r\n\r\n    @HostListener('touchend')\r\n    @HostListener('click')\r\n    onClick() {\r\n        this.hourSelected.next();\r\n    }\r\n\r\n    initHours(hours: number): void {\r\n        const angleStep = 30;\r\n\r\n        this.hoursList = Array(hours).fill(1).map((v, i) => {\r\n            const time = v + i;\r\n            return {time: time === 24 ? '00' : time, angle: angleStep * time};\r\n        });\r\n    }\r\n}\r\n",
    "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFaceComponent} from '../timepicker-hours-face/ngx-material-timepicker-hours-face.component';\r\nimport {TimePeriod} from '../../models/time-period.enum';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    template: `<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\"\r\n                              (timeChange)=\"hourChange.next($event)\"></ngx-material-timepicker-face>\r\n`\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFaceComponent implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    get disabledHours(): ClockFaceTime[] {\r\n        if (this.minTime || this.maxTime) {\r\n\r\n            return this.hoursList.map(value => {\r\n                const currentHour = this.period === TimePeriod.AM ? +value.time : +value.time + 12;\r\n                const hour = this.period === TimePeriod.AM && currentHour === 12 ? 0 : currentHour;\r\n                const currentTime = moment().hour(hour);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: currentTime.isBefore(this.minTime || null, 'hours')\r\n                    || currentTime.isAfter(this.maxTime || null, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return this.hoursList;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = this.disabledHours;\r\n        }\r\n    }\r\n}\r\n",
    "import {AfterContentInit, Component, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerHoursFaceComponent} from '../timepicker-hours-face/ngx-material-timepicker-hours-face.component';\r\nimport {ClockFaceTime} from '../../models/clock-face-time.interface';\r\nimport * as _moment from 'moment';\r\n\r\nconst moment = _moment;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    template: `<ngx-material-timepicker-face [selectedTime]=\"selectedHour\" [faceTime]=\"hoursList\" [format]=\"format\"\r\n                              (timeChange)=\"hourChange.next($event)\"></ngx-material-timepicker-face>\r\n`\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFaceComponent implements AfterContentInit {\r\n\r\n    @Input() format: number;\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    get disabledHours(): ClockFaceTime[] {\r\n        if (this.minTime || this.maxTime) {\r\n\r\n            return this.hoursList.map(value => {\r\n                const currentTime = moment().hour(+value.time);\r\n\r\n                return {\r\n                    ...value,\r\n                    disabled: currentTime.isBefore(this.minTime || null, 'hours')\r\n                    || currentTime.isAfter(this.maxTime || null, 'hours')\r\n                };\r\n            });\r\n        }\r\n        return this.hoursList;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = this.disabledHours;\r\n    }\r\n}\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NgxMaterialTimepickerComponent} from './ngx-material-timepicker.component';\r\nimport {StyleSanitizerPipe} from './pipes/style-sanitizer.pipe';\r\nimport {NgxMaterialTimepickerMinutesFaceComponent} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport {NgxMaterialTimepickerService} from './services/ngx-material-timepicker.service';\r\nimport {NgxMaterialTimepickerFaceComponent} from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport {TimeFormatterPipe} from './pipes/time-formatter.pipe';\r\nimport {NgxMaterialTimepickerButtonComponent} from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport {TimepickerDirective} from './directives/ngx-timepicker.directive';\r\nimport {OverlayDirective} from './directives/overlay.directive';\r\nimport {NgxMaterialTimepickerEventService} from './services/ngx-material-timepicker-event.service';\r\nimport {FocusAnchorDirective} from './directives/focus-anchor.directive';\r\nimport {NgxMaterialTimepickerToggleComponent} from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepicker12HoursFaceComponent} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {NgxMaterialTimepicker24HoursFaceComponent} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        TimepickerDirective,\r\n        NgxMaterialTimepickerToggleIconDirective\r\n    ],\r\n    declarations: [\r\n        NgxMaterialTimepickerComponent,\r\n        NgxMaterialTimepicker24HoursFaceComponent,\r\n        NgxMaterialTimepicker12HoursFaceComponent,\r\n        NgxMaterialTimepickerMinutesFaceComponent,\r\n        NgxMaterialTimepickerFaceComponent,\r\n        NgxMaterialTimepickerToggleComponent,\r\n        StyleSanitizerPipe,\r\n        TimeFormatterPipe,\r\n        NgxMaterialTimepickerButtonComponent,\r\n        TimepickerDirective,\r\n        OverlayDirective,\r\n        FocusAnchorDirective,\r\n        NgxMaterialTimepickerToggleIconDirective\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NgxMaterialTimepickerModule,\r\n            providers: [NgxMaterialTimepickerService, NgxMaterialTimepickerEventService]\r\n        }\r\n    }\r\n}\r\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "AM",
    "PM",
    "moment",
    "_moment",
    "TimeAdapter",
    "formatTime",
    "time",
    "format",
    "timeFormat",
    "TimeFormat",
    "convertTimeToMoment",
    "moment_",
    "DEFAULT_HOUR",
    "angle",
    "DEFAULT_MINUTE",
    "NgxMaterialTimepickerService",
    "hourSubject",
    "BehaviorSubject",
    "minuteSubject",
    "periodSubject",
    "TimePeriod",
    "defineProperty",
    "set",
    "hour",
    "next",
    "get",
    "asObservable",
    "minute",
    "period",
    "defaultTime",
    "toDate",
    "isValid",
    "assign",
    "getHours",
    "getMinutes",
    "substr",
    "length",
    "toUpperCase",
    "resetTime",
    "getFullTime",
    "getValue",
    "type",
    "Injectable",
    "NgxMaterialTimepickerEventService",
    "backdropClickSubject",
    "Subject",
    "keydownEventSubject",
    "ENTER",
    "LEAVE",
    "ESCAPE",
    "NgxMaterialTimepickerComponent",
    "timepickerService",
    "eventService",
    "_this",
    "timePeriod",
    "timeUnit",
    "TimeUnit",
    "activeTimeUnit",
    "HOUR",
    "isOpened",
    "subscriptions",
    "isEsc",
    "timeSet",
    "EventEmitter",
    "closed",
    "push",
    "merge",
    "backdropClick",
    "keydownEvent",
    "pipe",
    "filter",
    "e",
    "keyCode",
    "subscribe",
    "close",
    "timepickerInput",
    "min",
    "max",
    "disabled",
    "ngOnInit",
    "selectedHour",
    "selectedMinute",
    "selectedPeriod",
    "registerInput",
    "input",
    "Error",
    "onHourChange",
    "onMinuteChange",
    "changePeriod",
    "changeTimeUnit",
    "unit",
    "setTime",
    "setDefaultTime",
    "open",
    "animationState",
    "AnimationState",
    "animationDone",
    "event",
    "phaseName",
    "toState",
    "onKeydown",
    "stopPropagation",
    "ngOnDestroy",
    "forEach",
    "subscription",
    "unsubscribe",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "animations",
    "trigger",
    "transition",
    "style",
    "transform",
    "animate",
    "opacity",
    "providers",
    "cancelBtnTmpl",
    "Input",
    "confirmBtnTmpl",
    "Output",
    "HostListener",
    "StyleSanitizerPipe",
    "domSanitizer",
    "value",
    "bypassSecurityTrustStyle",
    "Pipe",
    "name",
    "DomSanitizer",
    "MINUTES",
    "NgxMaterialTimepickerMinutesFaceComponent",
    "minutesList",
    "minuteChange",
    "angleStep",
    "fill",
    "map",
    "v",
    "i",
    "index",
    "_selectedHour",
    "minTime",
    "maxTime",
    "currentTime",
    "isBefore",
    "isAfter",
    "ngOnChanges",
    "changes",
    "currentValue",
    "disabledMinutes",
    "CLOCK_HAND_STYLES",
    "height",
    "top",
    "NgxMaterialTimepickerFaceComponent",
    "innerClockFaceSize",
    "timeChange",
    "ngAfterViewInit",
    "setClockHandPosition",
    "selectedTime",
    "faceTime",
    "find",
    "setTimeout",
    "selectAvailableTime",
    "trackByTime",
    "_",
    "onMousedown",
    "preventDefault",
    "isStarted",
    "selectTime",
    "MouseEvent",
    "x0",
    "y0",
    "x",
    "y",
    "currentAngle",
    "clockFaceCords",
    "clockFace",
    "nativeElement",
    "getBoundingClientRect",
    "centerX",
    "left",
    "width",
    "centerY",
    "arctangent",
    "Math",
    "atan",
    "abs",
    "clientX",
    "clientY",
    "PI",
    "circleAngle",
    "isInnerClockChosen",
    "isInnerClockFace",
    "MINUTE",
    "roundedAngle",
    "roundAngle",
    "val",
    "onMouseup",
    "decreaseClockHand",
    "increaseClockHand",
    "clockHand",
    "isClockFaceDisabled",
    "every",
    "availableTime",
    "sqrt",
    "pow",
    "step",
    "round",
    "ViewChild",
    "TimeFormatterPipe",
    "moment.utc",
    "NgxMaterialTimepickerButtonComponent",
    "VALUE_ACCESSOR",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "TimepickerDirective",
    "multi",
    "elementRef",
    "onTouched",
    "timepickerSubscriptions",
    "onChange",
    "picker",
    "registerTimepicker",
    "_format",
    "_min",
    "_max",
    "_value",
    "isValueAvailableToUpdate",
    "updateInputValue",
    "console",
    "warn",
    "_timepicker",
    "onInput",
    "onClick",
    "disableClick",
    "writeValue",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "setDisabledState",
    "isDisabled",
    "s",
    "isBetween",
    "isAvailable",
    "Directive",
    "host",
    "[disabled]",
    "(input)",
    "(blur)",
    "ElementRef",
    "timepicker",
    "OverlayDirective",
    "FocusAnchorDirective",
    "document",
    "element",
    "activeElement",
    "focus",
    "undefined",
    "decorators",
    "Optional",
    "Inject",
    "DOCUMENT",
    "NgxMaterialTimepickerToggleIconDirective",
    "NgxMaterialTimepickerToggleComponent",
    "_disabled",
    "customIcon",
    "ContentChild",
    "NgxMaterialTimepickerHoursFaceComponent",
    "hours",
    "hourChange",
    "hourSelected",
    "hoursList",
    "initHours",
    "NgxMaterialTimepicker12HoursFaceComponent",
    "_super",
    "call",
    "tslib_1.__extends",
    "currentHour",
    "disabledHours",
    "NgxMaterialTimepicker24HoursFaceComponent",
    "ngAfterContentInit",
    "NgxMaterialTimepickerModule",
    "forRoot",
    "ngModule",
    "NgModule",
    "imports",
    "CommonModule",
    "exports",
    "declarations"
  ],
  "mappings": "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"
}
