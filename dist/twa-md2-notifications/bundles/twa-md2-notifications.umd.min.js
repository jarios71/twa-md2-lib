!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("rxjs"),require("rxjs/operators"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/material/card"),require("@angular/material/button"),require("@angular/material/icon"),require("@angular/cdk/overlay")):"function"==typeof define&&define.amd?define("twa-md2-notifications",["exports","@angular/core","rxjs","rxjs/operators","@angular/common","@angular/flex-layout","@angular/material/card","@angular/material/button","@angular/material/icon","@angular/cdk/overlay"],n):n(t["twa-md2-notifications"]={},t.ng.core,t.rxjs,t.rxjs.operators,t.ng.common,t.ng["flex-layout"],t.ng.material.card,t.ng.material.button,t.ng.material.icon,t.ng.cdk.overlay)}(this,function(t,e,o,i,n,a,c,r,l,s){"use strict";var f=function(){function t(){this.queue=[]}return t.prototype.add=function(t){console.log(t),this.queue.push(t)},t.prototype.remove=function(t){this.queue.splice(t,1)},t.prototype.get=function(){return o.of(this.queue)},t.prototype.clicked=function(t){console.log(t)},t.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=e.defineInjectable({factory:function n(){return new t},token:t,providedIn:"root"}),t}(),d=function(){function t(t){this._elRef=t,this.panelClicked=new e.EventEmitter,this.isOpened=!1}return t.prototype.ngOnInit=function(){var n=this;this.notifsService.get().subscribe(function(t){n.notifs=t}),this.globalClick=o.fromEvent(document,"click").pipe(i.delay(1),i.tap(function(){n.listening=!0})),this.globalClick.subscribe(function(t){n.onGlobalClick(t)})},t.prototype.onGlobalClick=function(t){t instanceof MouseEvent&&!0===this.listening&&"undefined"!=typeof this.notifPanel&&this.notifPanel!==undefined&&(console.log(this.notifPanel.nativeElement),console.log(this._elRef.nativeElement),console.log(t.target),!0===this.isDescendant(this.notifPanel.nativeElement,t.target)||!0===this.isDescendant(this._elRef.nativeElement,t.target)||this._elRef.nativeElement===t.target||this.hasClass(t.target,"twa-notif")||(this.isOpened=!1))},t.prototype.hasClass=function(t,n){return!!t.classList.contains(n)},t.prototype.isDescendant=function(t,n){for(var e=n;null!==e;){if(e===t)return!0;e=e.parentNode}return!1},t.prototype.notifClicked=function(){console.log("notif icon clicked!"),(this.isOpened||this.notifs.length)&&(this.isOpened=!this.isOpened)},t.prototype.notifPanelClicked=function(t,n){console.log("notif panel clicked!",t),"undefined"!=typeof t.data&&"undefined"!=typeof t.data.action?t.data.action(t):this.panelClicked.emit(t),this.notifsService.remove(n),this.checkIfOpened()},t.prototype.checkIfOpened=function(){0===this.notifs.length&&(this.isOpened=!1)},t.prototype.removePanel=function(t){this.notifsService.remove(t),this.checkIfOpened()},t.prototype.clearPanels=function(){var t=this;this.notifs.length?(this.notifs.splice(0,1),setTimeout(function(){t.clearPanels()},200)):this.checkIfOpened()},t.prototype.connectedOverlayDetach=function(){console.log("overlay detached!")},t.decorators=[{type:e.Component,args:[{selector:"twa-md2-notifications",template:'\n        <button mat-icon-button #overlayOrigin="cdkOverlayOrigin" cdkOverlayOrigin (click)="notifClicked()">\n            <mat-icon *ngIf="notifs.length">notifications</mat-icon>\n            <mat-icon *ngIf="notifs.length===0">notifications_none</mat-icon>\n        </button>\n        <ng-template\n            cdkConnectedOverlay\n            [cdkConnectedOverlayOrigin]="overlayOrigin"\n            [cdkConnectedOverlayOpen]="isOpened"\n            (detach)="connectedOverlayDetach()"\n        >\n            <div #notifPanelContainer class="notifPanelContainer twa-notif" fxLayoutGap="12px">\n                <div fxLayout="row" class="panelTitle twa-notif">\n                    <h3 class="twa-notif" fxFlex>Notifications</h3>\n                    <button class="twa-notif" mat-icon-button (click)="clearPanels()">\n                        <mat-icon class="twa-notif">clear_all</mat-icon>\n                    </button>\n                </div>\n                <mat-card *ngFor="let notif of notifs; let i = index" \n                          fxLayout="row"\n                          class="notif twa-notif"\n                          (click)="notifPanelClicked(notif, i)">\n                    <div class="cicon twa-notif">\n                        <mat-icon class="panelIcon twa-notif" *ngIf="!notif.image">notifications</mat-icon>\n                        <img class="notifImage twa-notif" *ngIf="notif.image" [src]="notif.image" />\n                    </div>\n                    <div class="ccontent twa-notif" fxLayout="column">\n                        <div fxLayout="row" class="twa-notif">\n                            <h4 class="twa-notif" fxFlex>{{notif.title}}</h4>\n                            <button class="close twa-notif" mat-icon-button (click)="removePanel(i)">\n                                <mat-icon class="twa-notif">close</mat-icon>\n                            </button>\n                        </div>\n                        <p class="twa-notif" fxFlex>{{notif.message}}</p>\n                    </div>\n                </mat-card>\n                <div class="notifPanelHideButton twa-notif" (click)="isOpened = false" fxLayout="row" fxLayoutAlign="center center">\n                    <mat-icon>expand_less</mat-icon>\n                </div>\n            </div>\n        </ng-template>\n    ',styles:[".notifPanelContainer { width: 320px; background: #eee; border: 1px solid #ccc;padding: 12px 12px 4px 12px; box-shadow: 0 2px 10px rgba(0,0,0,.2); }",".notifPanelHideButton { width: 100%; height: 18px; border-top: 1px solid #ccc; cursor: pointer; }","div.panelTitle h3 { color: #aaa; font-weight: 900; font-family: Roboto Light; font-size: 26px; margin: 8px; }","mat-card.notif { cursor: pointer; padding: 12px 12px 12px 8px; margin: 0 0 8px 0!important; }","mat-card.notif h4 { font-family: Roboto Light; font-size: 16px; margin: 8px 0 0; }","mat-card.notif p { font-family: Roboto Light; margin: 8px 0 0; }",".cicon { padding: 12px 12px 12px 4px; }",".ccontent { width: 100%; }","mat-icon.panelIcon { font-size: 40px; height: 40px; width: 40px; line-height: 40px; }","img.notifImage { width: 40x; height: 40px; border-radius: 50%; }","button.close { margin: -12px -12px 0 0;}"]}]}],t.ctorParameters=function(){return[{type:e.ElementRef}]},t.propDecorators={notifsService:[{type:e.Input}],panelClicked:[{type:e.Output}],notifPanel:[{type:e.ViewChild,args:["notifPanelContainer"]}]},t}(),p=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,a.FlexLayoutModule,c.MatCardModule,r.MatButtonModule,l.MatIconModule,s.OverlayModule],declarations:[d],exports:[s.OverlayModule,d],entryComponents:[d],providers:[d],schemas:[e.CUSTOM_ELEMENTS_SCHEMA]}]}],t}();t.TwaMd2NotificationsService=f,t.TWAMd2NotificationsComponent=d,t.TWAMd2NotificationsModule=p,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=twa-md2-notifications.umd.min.js.map