!function(n,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("rxjs"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/material/card"),require("@angular/material/button"),require("@angular/material/icon"),require("@angular/cdk/overlay")):"function"==typeof define&&define.amd?define("twa-md2-notifications",["exports","@angular/core","rxjs","@angular/common","@angular/flex-layout","@angular/material/card","@angular/material/button","@angular/material/icon","@angular/cdk/overlay"],t):t(n["twa-md2-notifications"]={},n.ng.core,n.rxjs,n.ng.common,n.ng["flex-layout"],n.ng.material.card,n.ng.material.button,n.ng.material.icon,n.ng.cdk.overlay)}(this,function(n,e,o,t,i,a,c,r,l){"use strict";var s=function(){function n(){this.queue=[]}return n.prototype.add=function(n){console.log(n),this.queue.push(n)},n.prototype.remove=function(n){this.queue.splice(n,1)},n.prototype.get=function(){return o.of(this.queue)},n.prototype.clicked=function(n){console.log(n)},n.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],n.ctorParameters=function(){return[]},n.ngInjectableDef=e.defineInjectable({factory:function t(){return new n},token:n,providedIn:"root"}),n}(),d=function(){function n(){this.panelClicked=new e.EventEmitter,this.isOpened=!1}return n.prototype.ngOnInit=function(){var t=this;this.notifsService.get().subscribe(function(n){t.notifs=n})},n.prototype.notifClicked=function(){console.log("notif icon clicked!"),(this.isOpened||this.notifs.length)&&(this.isOpened=!this.isOpened)},n.prototype.notifPanelClicked=function(n,t){console.log("notif panel clicked!",n),"undefined"!=typeof n.data&&"undefined"!=typeof n.data.action?n.data.action(n):this.panelClicked.emit(n),this.notifsService.remove(t),this.checkIfOpened()},n.prototype.checkIfOpened=function(){0===this.notifs.length&&(this.isOpened=!1)},n.prototype.removePanel=function(n){this.notifsService.remove(n),this.checkIfOpened()},n.prototype.clearPanels=function(){var n=this;this.notifs.length?(this.notifs.splice(0,1),setTimeout(function(){n.clearPanels()},200)):this.checkIfOpened()},n.prototype.connectedOverlayDetach=function(){console.log("overlay detached!")},n.decorators=[{type:e.Component,args:[{selector:"twa-md2-notifications",template:'\n        <button mat-icon-button #overlayOrigin="cdkOverlayOrigin" cdkOverlayOrigin (click)="notifClicked()">\n            <mat-icon *ngIf="notifs.length">notifications</mat-icon>\n            <mat-icon *ngIf="notifs.length===0">notifications_none</mat-icon>\n        </button>\n        <ng-template\n            cdkConnectedOverlay\n            [cdkConnectedOverlayOrigin]="overlayOrigin"\n            [cdkConnectedOverlayOpen]="isOpened"\n            (detach)="connectedOverlayDetach()"\n        >\n            <div class="notifPanelContainer" fxLayoutGap="12px">\n                <div fxLayout="row" class="panelTitle">\n                    <h3 fxFlex>Notifications</h3>\n                    <button mat-icon-button (click)="clearPanels()">\n                        <mat-icon>clear_all</mat-icon>\n                    </button>\n                </div>\n                <mat-card *ngFor="let notif of notifs; let i = index" fxLayout="row" class="notif" (click)="notifPanelClicked(notif, i)">\n                    <div class="cicon">\n                        <mat-icon class="panelIcon" *ngIf="!notif.image">notifications</mat-icon>\n                        <img class="notifImage" *ngIf="notif.image" [src]="notif.image" />\n                    </div>\n                    <div class="ccontent" fxLayout="column">\n                        <div fxLayout="row">\n                            <h4 fxFlex>{{notif.title}}</h4>\n                            <button class="close" mat-icon-button (click)="removePanel(i)">\n                                <mat-icon>close</mat-icon>\n                            </button>\n                        </div>\n                        <p fxFlex>{{notif.message}}</p>\n                    </div>\n                </mat-card>\n                <div class="notifPanelHideButton" (click)="isOpened = false" fxLayout="row" fxLayoutAlign="center center">\n                    <mat-icon>expand_less</mat-icon>\n                </div>\n            </div>\n        </ng-template>\n    ',styles:[".notifPanelContainer { width: 320px; background: #eee; border: 1px solid #ccc;padding: 12px 12px 4px 12px; box-shadow: 0 2px 10px rgba(0,0,0,.2); }",".notifPanelHideButton { width: 100%; height: 18px; border-top: 1px solid #ccc; cursor: pointer; }","div.panelTitle h3 { color: #aaa; font-weight: 900; font-family: Roboto Light; font-size: 26px; margin: 8px; }","mat-card.notif { cursor: pointer; padding: 12px 12px 12px 8px; margin: 0 0 8px 0!important; }","mat-card.notif h4 { font-family: Roboto Light; font-size: 16px; margin: 8px 0 0; }","mat-card.notif p { font-family: Roboto Light; margin: 8px 0 0; }",".cicon { padding: 12px 12px 12px 4px; }",".ccontent { width: 100%; }","mat-icon.panelIcon { font-size: 40px; height: 40px; width: 40px; line-height: 40px; }","img.notifImage { width: 40x; height: 40px; border-radius: 50%; }","button.close { margin: -12px -12px 0 0;}"]}]}],n.ctorParameters=function(){return[]},n.propDecorators={notifsService:[{type:e.Input}],panelClicked:[{type:e.Output}]},n}(),f=function(){function n(){}return n.decorators=[{type:e.NgModule,args:[{imports:[t.CommonModule,i.FlexLayoutModule,a.MatCardModule,c.MatButtonModule,r.MatIconModule,l.OverlayModule],declarations:[d],exports:[l.OverlayModule,d],entryComponents:[d],providers:[d],schemas:[e.CUSTOM_ELEMENTS_SCHEMA]}]}],n}();n.TwaMd2NotificationsService=s,n.TwaMd2NotificationsComponent=d,n.TwaMd2NotificationsModule=f,Object.defineProperty(n,"__esModule",{value:!0})});
//# sourceMappingURL=twa-md2-notifications.umd.min.js.map