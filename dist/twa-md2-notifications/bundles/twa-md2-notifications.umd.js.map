{"version":3,"file":"twa-md2-notifications.umd.js.map","sources":["ng://twa-md2-notifications/lib/twa-md2-notifications.service.ts","ng://twa-md2-notifications/lib/twa-md2-notifications.component.ts","ng://twa-md2-notifications/lib/twa-md2-notifications.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nexport interface INotif {\n    title: string;\n    message: string;\n    date: string;\n    data?: any;\n    icon?: string;\n    image?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TwaMd2NotificationsService {\n\n    private queue: INotif[] = [];\n\n    constructor() { }\n\n    public add(notif: INotif) {\n        console.log(notif);\n        this.queue.push(notif);\n    }\n\n    public remove(idx: number) {\n        this.queue.splice(idx, 1);\n    }\n\n    public get(): Observable<INotif[]> {\n        return of(this.queue);\n    }\n\n    public clicked(notif: INotif) {\n        console.log(notif);\n    }\n\n}\n","import { Component, OnInit, Input, Output, ViewChild, EventEmitter, ElementRef } from '@angular/core';\nimport { TwaMd2NotificationsService, INotif } from './twa-md2-notifications.service';\nimport { Observable, fromEvent } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\n// import { EventEmitter } from 'protractor';\n\n@Component({\n    selector: 'twa-md2-notifications',\n    template: `\n        <button mat-icon-button #overlayOrigin=\"cdkOverlayOrigin\" cdkOverlayOrigin (click)=\"notifClicked()\">\n            <mat-icon *ngIf=\"notifs.length\">notifications</mat-icon>\n            <mat-icon *ngIf=\"notifs.length===0\">notifications_none</mat-icon>\n        </button>\n        <ng-template\n            cdkConnectedOverlay\n            [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n            [cdkConnectedOverlayOpen]=\"isOpened\"\n            (detach)=\"connectedOverlayDetach()\"\n        >\n            <div #notifPanelContainer class=\"notifPanelContainer twa-notif\" fxLayoutGap=\"12px\">\n                <div fxLayout=\"row\" class=\"panelTitle twa-notif\">\n                    <h3 class=\"twa-notif\" fxFlex>Notifications</h3>\n                    <button class=\"twa-notif\" mat-icon-button (click)=\"clearPanels()\">\n                        <mat-icon class=\"twa-notif\">clear_all</mat-icon>\n                    </button>\n                </div>\n                <mat-card *ngFor=\"let notif of notifs; let i = index\" \n                          fxLayout=\"row\"\n                          class=\"notif twa-notif\"\n                          (click)=\"notifPanelClicked(notif, i)\">\n                    <div class=\"cicon twa-notif\">\n                        <mat-icon class=\"panelIcon twa-notif\" *ngIf=\"!notif.image\">notifications</mat-icon>\n                        <img class=\"notifImage twa-notif\" *ngIf=\"notif.image\" [src]=\"notif.image\" />\n                    </div>\n                    <div class=\"ccontent twa-notif\" fxLayout=\"column\">\n                        <div fxLayout=\"row\" class=\"twa-notif\">\n                            <h4 class=\"twa-notif\" fxFlex>{{notif.title}}</h4>\n                            <button class=\"close twa-notif\" mat-icon-button (click)=\"removePanel(i)\">\n                                <mat-icon class=\"twa-notif\">close</mat-icon>\n                            </button>\n                        </div>\n                        <p class=\"twa-notif\" fxFlex>{{notif.message}}</p>\n                    </div>\n                </mat-card>\n                <div class=\"notifPanelHideButton twa-notif\" (click)=\"isOpened = false\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                    <mat-icon>expand_less</mat-icon>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        '.notifPanelContainer { width: 320px; background: #eee; border: 1px solid #ccc;' +\n                               'padding: 12px 12px 4px 12px; box-shadow: 0 2px 10px rgba(0,0,0,.2); }',\n        '.notifPanelHideButton { width: 100%; height: 18px; border-top: 1px solid #ccc; cursor: pointer; }',\n        'div.panelTitle h3 { color: #aaa; font-weight: 900; font-family: Roboto Light; font-size: 26px; margin: 8px; }',\n        'mat-card.notif { cursor: pointer; padding: 12px 12px 12px 8px; margin: 0 0 8px 0!important; }',\n        'mat-card.notif h4 { font-family: Roboto Light; font-size: 16px; margin: 8px 0 0; }',\n        'mat-card.notif p { font-family: Roboto Light; margin: 8px 0 0; }',\n        '.cicon { padding: 12px 12px 12px 4px; }',\n        '.ccontent { width: 100%; }',\n        'mat-icon.panelIcon { font-size: 40px; height: 40px; width: 40px; line-height: 40px; }',\n        'img.notifImage { width: 40x; height: 40px; border-radius: 50%; }',\n        'button.close { margin: -12px -12px 0 0;}',\n    ]\n})\nexport class TwaMd2NotificationsComponent implements OnInit {\n    @Input() notifsService: TwaMd2NotificationsService;\n    @Output() panelClicked: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('notifPanelContainer') notifPanel;\n\n    private globalClick: Observable<Event>;\n    private listening: boolean;\n\n    isOpened = false;\n    notifs: INotif[];\n\n    constructor(\n        private _elRef: ElementRef,\n    ) { }\n\n    ngOnInit() {\n        this.notifsService.get().subscribe(data => {\n            this.notifs = data;\n        });\n        this.globalClick = fromEvent(document, 'click').pipe(\n            delay(1),\n            tap(() => {\n                this.listening = true;\n            })\n        );\n        this.globalClick.subscribe((event: MouseEvent) => {\n            this.onGlobalClick(event);\n        });\n    }\n\n    onGlobalClick(event: MouseEvent) {\n        if (event instanceof MouseEvent &&\n            this.listening === true &&\n            typeof this.notifPanel !== 'undefined' &&\n            this.notifPanel !== undefined) {\n            console.log(this.notifPanel.nativeElement);\n            console.log(this._elRef.nativeElement);\n            console.log(event.target);\n            if (this.isDescendant(this.notifPanel.nativeElement, event.target) !== true &&\n                this.isDescendant(this._elRef.nativeElement, event.target) !== true &&\n                this._elRef.nativeElement !== event.target &&\n                !this.hasClass(event.target, 'twa-notif')) {\n                this.isOpened = false;\n            }\n        }\n    }\n\n    hasClass(elem, className) {\n        if (elem.classList.contains(className)) {\n            return true;\n        }\n        return false;\n    }\n\n    isDescendant(parent, child) {\n        let node = child;\n        while (node !== null) {\n            if (node === parent) {\n                return true;\n            } else {\n                node = node.parentNode;\n            }\n        }\n        return false;\n    }\n\n    notifClicked() {\n        console.log('notif icon clicked!');\n        if (!this.isOpened && !this.notifs.length) {\n            return;\n        }\n        this.isOpened = !this.isOpened;\n    }\n\n    notifPanelClicked(notif: INotif, notifIdx: number) {\n        console.log('notif panel clicked!', notif);\n        if (typeof notif.data !== 'undefined' &&\n        typeof notif.data.action !== 'undefined') {\n            notif.data.action(notif);\n        } else {\n            this.panelClicked.emit(notif);\n        }\n        this.notifsService.remove(notifIdx);\n        this.checkIfOpened();\n    }\n\n    checkIfOpened() {\n        if (this.notifs.length === 0) {\n            this.isOpened = false;\n        }\n    }\n\n    removePanel(notifIdx: number) {\n        this.notifsService.remove(notifIdx);\n        this.checkIfOpened();\n    }\n\n    clearPanels() {\n        if (this.notifs.length) {\n            this.notifs.splice(0, 1);\n            setTimeout(() => {\n                this.clearPanels();\n            }, 200);\n        } else {\n            this.checkIfOpened();\n        }\n    }\n\n    connectedOverlayDetach() {\n        console.log('overlay detached!');\n    }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCardModule } from '@angular/material/card';\n// import { TwaMd2NotificationsService } from './twa-md2-notifications.service';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { TwaMd2NotificationsComponent } from './twa-md2-notifications.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MatCardModule,\n        MatButtonModule,\n        MatIconModule,\n        OverlayModule,\n        // TwaMd2NotificationsComponent,\n    ],\n    declarations: [\n        TwaMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    exports: [\n        OverlayModule,\n        TwaMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    entryComponents: [\n        TwaMd2NotificationsComponent,\n    ],\n    providers: [\n        TwaMd2NotificationsComponent,\n    ],\n    schemas: [\n        CUSTOM_ELEMENTS_SCHEMA\n    ]\n})\nexport class TwaMd2NotificationsModule { }\n"],"names":["of","Injectable","EventEmitter","fromEvent","delay","tap","Component","ElementRef","Input","Output","ViewChild","NgModule","CommonModule","FlexLayoutModule","MatCardModule","MatButtonModule","MatIconModule","OverlayModule","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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"}
