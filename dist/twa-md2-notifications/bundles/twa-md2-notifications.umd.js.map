{"version":3,"file":"twa-md2-notifications.umd.js","sources":["../../projects/twa-md2-notifications/src/lib/twa-md2-notifications.service.ts","../../projects/twa-md2-notifications/src/lib/twa-md2-notifications.component.ts","../../projects/twa-md2-notifications/src/lib/twa-md2-notifications.module.ts","../../../projects/twa-md2-notifications/src/public_api.ts","../../../projects/twa-md2-notifications/src/twa-md2-notifications.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nexport interface INotif {\n    id?: string;\n    title: string;\n    message: string;\n    date?: string;\n    data?: any;\n    icon?: string;\n    image?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TwaMd2NotificationsService {\n\n    private queue: INotif[] = [];\n\n    constructor() { }\n\n    public add(notif: INotif) {\n        // console.log(notif);\n        this.queue.push(notif);\n    }\n\n    public remove(idx: number) {\n        this.queue.splice(idx, 1);\n    }\n\n    public get(): Observable<INotif[]> {\n        return of(this.queue);\n    }\n\n    public clicked(notif: INotif) {\n        console.log(notif);\n    }\n\n}\n","import { Component, OnInit, Input, Output, ViewChild, EventEmitter, ElementRef } from '@angular/core';\nimport { TwaMd2NotificationsService, INotif } from './twa-md2-notifications.service';\nimport { Observable, fromEvent } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\n// import { EventEmitter } from 'protractor';\n\n@Component({\n    selector: 'twa-md2-notifications',\n    template: `\n        <button mat-icon-button #overlayOrigin=\"cdkOverlayOrigin\" cdkOverlayOrigin (click)=\"notifClicked()\">\n            <mat-icon [matBadge]=\"notifs.length\" matBadgeSize=\"medium\" *ngIf=\"notifs.length\">notifications</mat-icon>\n            <mat-icon *ngIf=\"notifs.length===0\">notifications_none</mat-icon>\n        </button>\n        <ng-template\n            cdkConnectedOverlay\n            [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n            [cdkConnectedOverlayOpen]=\"isOpened\"\n            (detach)=\"connectedOverlayDetach()\"\n        >\n            <div #notifPanelContainer class=\"notifPanelContainer twa-notif\" fxLayoutGap=\"12px\">\n                <div fxLayout=\"row\" class=\"panelTitle twa-notif\">\n                    <h3 class=\"twa-notif\" fxFlex>Notifications</h3>\n                    <button class=\"twa-notif\" mat-icon-button (click)=\"clearPanels()\">\n                        <mat-icon class=\"twa-notif\">clear_all</mat-icon>\n                    </button>\n                </div>\n                <div class=\"notifsContainer\" [ngClass]=\"{'scrolling': notifs.length > 4}\">\n                    <mat-card *ngFor=\"let notif of notifs; let i = index\"\n                            fxLayout=\"row\"\n                            class=\"notif twa-notif\"\n                            (click)=\"notifPanelClicked(notif, i)\">\n                        <div class=\"cicon twa-notif\">\n                            <mat-icon class=\"panelIcon twa-notif\" *ngIf=\"!notif.image\">notifications</mat-icon>\n                            <img class=\"notifImage twa-notif\" *ngIf=\"notif.image\" [src]=\"notif.image\" />\n                        </div>\n                        <div class=\"ccontent twa-notif\" fxLayout=\"column\">\n                            <div fxLayout=\"row\" class=\"twa-notif\">\n                                <h4 class=\"twa-notif\" fxFlex>{{notif.title}}</h4>\n                                <button class=\"close twa-notif\" mat-icon-button (click)=\"removePanel(notif, i)\">\n                                    <mat-icon class=\"twa-notif\">close</mat-icon>\n                                </button>\n                            </div>\n                            <p class=\"twa-notif\" fxFlex>{{notif.message}}</p>\n                        </div>\n                    </mat-card>\n                </div>\n                <div class=\"notifPanelHideButton twa-notif\" (click)=\"isOpened = false\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                    <mat-icon>expand_less</mat-icon>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        '.notifPanelContainer { width: 320px; background: #eee; border: 1px solid #ccc;' +\n                               'padding: 12px 12px 4px 12px; box-shadow: 0 2px 10px rgba(0,0,0,.2); }',\n        '.notifPanelHideButton { width: 100%; height: 18px; border-top: 1px solid #ccc; cursor: pointer; }',\n        'div.panelTitle h3 { color: #aaa; font-weight: 900; font-family: Roboto Light; font-size: 26px; margin: 8px; }',\n        'div.notifsContainer.scrolling { max-height: 408px; overflow: auto; }',\n        'mat-card.notif { cursor: pointer; padding: 12px 12px 12px 8px; margin: 0 0 8px 0!important; }',\n        'mat-card.notif h4 { font-family: Roboto Light; font-size: 16px; margin: 8px 0 0; }',\n        'mat-card.notif p { font-family: Roboto Light; margin: 8px 0 0; }',\n        '.cicon { padding: 12px 12px 12px 4px; }',\n        '.ccontent { width: 100%; }',\n        'mat-icon.panelIcon { font-size: 40px; height: 40px; width: 40px; line-height: 40px; }',\n        'img.notifImage { width: 40x; height: 40px; border-radius: 50%; }',\n        'button.close { margin: -12px -12px 0 0;}',\n    ]\n})\nexport class TWAMd2NotificationsComponent implements OnInit {\n    @Input() notifsService: TwaMd2NotificationsService;\n    @Output() panelClicked: EventEmitter<any> = new EventEmitter();\n    @Output() panelClosed: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('notifPanelContainer') notifPanel;\n\n    private globalClick: Observable<Event>;\n    private listening: boolean;\n\n    isOpened = false;\n    notifs: INotif[];\n\n    constructor(\n        private _elRef: ElementRef,\n    ) { }\n\n    ngOnInit() {\n        this.notifsService.get().subscribe(data => {\n            this.notifs = data;\n        });\n        this.globalClick = fromEvent(document, 'click').pipe(\n            delay(1),\n            tap(() => {\n                this.listening = true;\n            })\n        );\n        this.globalClick.subscribe((event: MouseEvent) => {\n            this.onGlobalClick(event);\n        });\n    }\n\n    onGlobalClick(event: MouseEvent) {\n        if (event instanceof MouseEvent &&\n            this.listening === true &&\n            typeof this.notifPanel !== 'undefined' &&\n            this.notifPanel !== undefined) {\n            // console.log(this.notifPanel.nativeElement);\n            // console.log(this._elRef.nativeElement);\n            // console.log(event.target);\n            if (this.isDescendant(this.notifPanel.nativeElement, event.target) !== true &&\n                this.isDescendant(this._elRef.nativeElement, event.target) !== true &&\n                this._elRef.nativeElement !== event.target &&\n                !this.hasClass(event.target, 'twa-notif')) {\n                this.isOpened = false;\n            }\n        }\n    }\n\n    hasClass(elem, className) {\n        if (elem.classList.contains(className)) {\n            return true;\n        }\n        return false;\n    }\n\n    isDescendant(parent, child) {\n        let node = child;\n        while (node !== null) {\n            if (node === parent) {\n                return true;\n            } else {\n                node = node.parentNode;\n            }\n        }\n        return false;\n    }\n\n    notifClicked() {\n      // console.log('notif icon clicked!');\n      if (!this.isOpened && !this.notifs.length) {\n        return;\n      }\n      this.isOpened = !this.isOpened;\n    }\n\n    notifPanelClicked(notif: INotif, notifIdx: number) {\n      // console.log('notif panel clicked!', notif);\n      if (typeof notif.data !== 'undefined' &&\n      typeof notif.data.action !== 'undefined') {\n        notif.data.action(notif);\n      // } else {\n      }\n      this.panelClicked.emit(notif);\n      this.notifsService.remove(notifIdx);\n      this.checkIfOpened();\n    }\n\n    checkIfOpened() {\n      if (this.notifs.length === 0) {\n        this.isOpened = false;\n      }\n    }\n\n    removePanel(notif: INotif, notifIdx: number) {\n      this.panelClosed.emit(notif);\n      this.notifsService.remove(notifIdx);\n      this.checkIfOpened();\n    }\n\n    clearPanels() {\n      if (this.notifs.length) {\n        this.removePanel(this.notifs[0], 0);\n        // this.notifs.splice(0, 1);\n        setTimeout(() => {\n          this.clearPanels();\n        }, 100);\n      } else {\n        this.checkIfOpened();\n      }\n    }\n\n    connectedOverlayDetach() {\n      // console.log('overlay detached!');\n    }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCardModule } from '@angular/material/card';\n// import { TwaMd2NotificationsService } from './twa-md2-notifications.service';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatBadgeModule } from '@angular/material/badge';\n\nimport { TWAMd2NotificationsComponent } from './twa-md2-notifications.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MatCardModule,\n        MatButtonModule,\n        MatIconModule,\n        OverlayModule,\n        MatBadgeModule,\n        // TWAMd2NotificationsComponent,\n    ],\n    declarations: [\n        TWAMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    exports: [\n        OverlayModule,\n        TWAMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    // entryComponents: [\n    //     TWAMd2NotificationsComponent,\n    // ],\n    providers: [\n        TWAMd2NotificationsComponent,\n    ],\n    schemas: [\n        CUSTOM_ELEMENTS_SCHEMA\n    ]\n})\nexport class TWAMd2NotificationsModule { }\n","/*\n * Public API Surface of twa-md2-notifications\n */\n\nexport * from './lib/twa-md2-notifications.service';\nexport * from './lib/twa-md2-notifications.component';\nexport * from './lib/twa-md2-notifications.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["of","Injectable","EventEmitter","fromEvent","delay","tap","Component","ElementRef","Input","Output","ViewChild","NgModule","CommonModule","FlexLayoutModule","MatCardModule","MatButtonModule","MatIconModule","OverlayModule","MatBadgeModule","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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"}