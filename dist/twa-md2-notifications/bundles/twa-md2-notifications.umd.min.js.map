{"version":3,"sources":["../../projects/twa-md2-notifications/src/lib/twa-md2-notifications.service.ts","../../projects/twa-md2-notifications/src/lib/twa-md2-notifications.component.ts","../../projects/twa-md2-notifications/src/lib/twa-md2-notifications.module.ts"],"names":["TwaMd2NotificationsService","this","queue","prototype","add","notif","push","remove","idx","splice","get","of","clicked","console","log","Injectable","args","providedIn","TWAMd2NotificationsComponent","_elRef","panelClicked","EventEmitter","panelClosed","isOpened","ngOnInit","_this","notifsService","subscribe","data","notifs","globalClick","fromEvent","document","pipe","delay","tap","listening","event","onGlobalClick","MouseEvent","notifPanel","undefined","isDescendant","nativeElement","target","hasClass","elem","className","classList","contains","parent","child","node","parentNode","notifClicked","length","notifPanelClicked","notifIdx","action","emit","checkIfOpened","removePanel","clearPanels","setTimeout","connectedOverlayDetach","Component","selector","template","ElementRef","Input","Output","ViewChild","NgModule","imports","CommonModule","FlexLayoutModule","MatCardModule","MatButtonModule","MatIconModule","OverlayModule","MatBadgeModule","declarations","exports","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nexport interface INotif {\n    id?: string;\n    title: string;\n    message: string;\n    date?: string;\n    data?: any;\n    icon?: string;\n    image?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TwaMd2NotificationsService {\n\n    private queue: INotif[] = [];\n\n    constructor() { }\n\n    public add(notif: INotif) {\n        // console.log(notif);\n        this.queue.push(notif);\n    }\n\n    public remove(idx: number) {\n        this.queue.splice(idx, 1);\n    }\n\n    public get(): Observable<INotif[]> {\n        return of(this.queue);\n    }\n\n    public clicked(notif: INotif) {\n        console.log(notif);\n    }\n\n}\n","import { Component, OnInit, Input, Output, ViewChild, EventEmitter, ElementRef } from '@angular/core';\nimport { TwaMd2NotificationsService, INotif } from './twa-md2-notifications.service';\nimport { Observable, fromEvent } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\n// import { EventEmitter } from 'protractor';\n\n@Component({\n    selector: 'twa-md2-notifications',\n    template: `\n        <button mat-icon-button #overlayOrigin=\"cdkOverlayOrigin\" cdkOverlayOrigin (click)=\"notifClicked()\">\n            <mat-icon [matBadge]=\"notifs.length\" matBadgeSize=\"medium\" *ngIf=\"notifs.length\">notifications</mat-icon>\n            <mat-icon *ngIf=\"notifs.length===0\">notifications_none</mat-icon>\n        </button>\n        <ng-template\n            cdkConnectedOverlay\n            [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n            [cdkConnectedOverlayOpen]=\"isOpened\"\n            (detach)=\"connectedOverlayDetach()\"\n        >\n            <div #notifPanelContainer class=\"notifPanelContainer twa-notif\" fxLayoutGap=\"12px\">\n                <div fxLayout=\"row\" class=\"panelTitle twa-notif\">\n                    <h3 class=\"twa-notif\" fxFlex>Notifications</h3>\n                    <button class=\"twa-notif\" mat-icon-button (click)=\"clearPanels()\">\n                        <mat-icon class=\"twa-notif\">clear_all</mat-icon>\n                    </button>\n                </div>\n                <div class=\"notifsContainer\" [ngClass]=\"{'scrolling': notifs.length > 4}\">\n                    <mat-card *ngFor=\"let notif of notifs; let i = index\"\n                            fxLayout=\"row\"\n                            class=\"notif twa-notif\"\n                            (click)=\"notifPanelClicked(notif, i)\">\n                        <div class=\"cicon twa-notif\">\n                            <mat-icon class=\"panelIcon twa-notif\" *ngIf=\"!notif.image\">notifications</mat-icon>\n                            <img class=\"notifImage twa-notif\" *ngIf=\"notif.image\" [src]=\"notif.image\" />\n                        </div>\n                        <div class=\"ccontent twa-notif\" fxLayout=\"column\">\n                            <div fxLayout=\"row\" class=\"twa-notif\">\n                                <h4 class=\"twa-notif\" fxFlex>{{notif.title}}</h4>\n                                <button class=\"close twa-notif\" mat-icon-button (click)=\"removePanel(notif, i)\">\n                                    <mat-icon class=\"twa-notif\">close</mat-icon>\n                                </button>\n                            </div>\n                            <p class=\"twa-notif\" fxFlex>{{notif.message}}</p>\n                        </div>\n                    </mat-card>\n                </div>\n                <div class=\"notifPanelHideButton twa-notif\" (click)=\"isOpened = false\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                    <mat-icon>expand_less</mat-icon>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        '.notifPanelContainer { width: 320px; background: #eee; border: 1px solid #ccc;' +\n                               'padding: 12px 12px 4px 12px; box-shadow: 0 2px 10px rgba(0,0,0,.2); }',\n        '.notifPanelHideButton { width: 100%; height: 18px; border-top: 1px solid #ccc; cursor: pointer; }',\n        'div.panelTitle h3 { color: #aaa; font-weight: 900; font-family: Roboto Light; font-size: 26px; margin: 8px; }',\n        'div.notifsContainer.scrolling { max-height: 408px; overflow: auto; }',\n        'mat-card.notif { cursor: pointer; padding: 12px 12px 12px 8px; margin: 0 0 8px 0!important; }',\n        'mat-card.notif h4 { font-family: Roboto Light; font-size: 16px; margin: 8px 0 0; }',\n        'mat-card.notif p { font-family: Roboto Light; margin: 8px 0 0; }',\n        '.cicon { padding: 12px 12px 12px 4px; }',\n        '.ccontent { width: 100%; }',\n        'mat-icon.panelIcon { font-size: 40px; height: 40px; width: 40px; line-height: 40px; }',\n        'img.notifImage { width: 40x; height: 40px; border-radius: 50%; }',\n        'button.close { margin: -12px -12px 0 0;}',\n    ]\n})\nexport class TWAMd2NotificationsComponent implements OnInit {\n    @Input() notifsService: TwaMd2NotificationsService;\n    @Output() panelClicked: EventEmitter<any> = new EventEmitter();\n    @Output() panelClosed: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('notifPanelContainer') notifPanel;\n\n    private globalClick: Observable<Event>;\n    private listening: boolean;\n\n    isOpened = false;\n    notifs: INotif[];\n\n    constructor(\n        private _elRef: ElementRef,\n    ) { }\n\n    ngOnInit() {\n        this.notifsService.get().subscribe(data => {\n            this.notifs = data;\n        });\n        this.globalClick = fromEvent(document, 'click').pipe(\n            delay(1),\n            tap(() => {\n                this.listening = true;\n            })\n        );\n        this.globalClick.subscribe((event: MouseEvent) => {\n            this.onGlobalClick(event);\n        });\n    }\n\n    onGlobalClick(event: MouseEvent) {\n        if (event instanceof MouseEvent &&\n            this.listening === true &&\n            typeof this.notifPanel !== 'undefined' &&\n            this.notifPanel !== undefined) {\n            // console.log(this.notifPanel.nativeElement);\n            // console.log(this._elRef.nativeElement);\n            // console.log(event.target);\n            if (this.isDescendant(this.notifPanel.nativeElement, event.target) !== true &&\n                this.isDescendant(this._elRef.nativeElement, event.target) !== true &&\n                this._elRef.nativeElement !== event.target &&\n                !this.hasClass(event.target, 'twa-notif')) {\n                this.isOpened = false;\n            }\n        }\n    }\n\n    hasClass(elem, className) {\n        if (elem.classList.contains(className)) {\n            return true;\n        }\n        return false;\n    }\n\n    isDescendant(parent, child) {\n        let node = child;\n        while (node !== null) {\n            if (node === parent) {\n                return true;\n            } else {\n                node = node.parentNode;\n            }\n        }\n        return false;\n    }\n\n    notifClicked() {\n      // console.log('notif icon clicked!');\n      if (!this.isOpened && !this.notifs.length) {\n        return;\n      }\n      this.isOpened = !this.isOpened;\n    }\n\n    notifPanelClicked(notif: INotif, notifIdx: number) {\n      // console.log('notif panel clicked!', notif);\n      if (typeof notif.data !== 'undefined' &&\n      typeof notif.data.action !== 'undefined') {\n        notif.data.action(notif);\n      // } else {\n      }\n      this.panelClicked.emit(notif);\n      this.notifsService.remove(notifIdx);\n      this.checkIfOpened();\n    }\n\n    checkIfOpened() {\n      if (this.notifs.length === 0) {\n        this.isOpened = false;\n      }\n    }\n\n    removePanel(notif: INotif, notifIdx: number) {\n      this.panelClosed.emit(notif);\n      this.notifsService.remove(notifIdx);\n      this.checkIfOpened();\n    }\n\n    clearPanels() {\n      if (this.notifs.length) {\n        this.removePanel(this.notifs[0], 0);\n        // this.notifs.splice(0, 1);\n        setTimeout(() => {\n          this.clearPanels();\n        }, 100);\n      } else {\n        this.checkIfOpened();\n      }\n    }\n\n    connectedOverlayDetach() {\n      // console.log('overlay detached!');\n    }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCardModule } from '@angular/material/card';\n// import { TwaMd2NotificationsService } from './twa-md2-notifications.service';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatBadgeModule } from '@angular/material/badge';\n\nimport { TWAMd2NotificationsComponent } from './twa-md2-notifications.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MatCardModule,\n        MatButtonModule,\n        MatIconModule,\n        OverlayModule,\n        MatBadgeModule,\n        // TWAMd2NotificationsComponent,\n    ],\n    declarations: [\n        TWAMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    exports: [\n        OverlayModule,\n        TWAMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    // entryComponents: [\n    //     TWAMd2NotificationsComponent,\n    // ],\n    providers: [\n        TWAMd2NotificationsComponent,\n    ],\n    schemas: [\n        CUSTOM_ELEMENTS_SCHEMA\n    ]\n})\nexport class TWAMd2NotificationsModule { }\n"]}