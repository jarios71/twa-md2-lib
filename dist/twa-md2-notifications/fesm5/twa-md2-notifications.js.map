{"version":3,"file":"twa-md2-notifications.js.map","sources":["ng://twa-md2-notifications/lib/twa-md2-notifications.service.ts","ng://twa-md2-notifications/lib/twa-md2-notifications.component.ts","ng://twa-md2-notifications/lib/twa-md2-notifications.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\n\nexport interface INotif {\n    title: string;\n    message: string;\n    date: string;\n    data?: any;\n    icon?: string;\n    image?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TwaMd2NotificationsService {\n\n    private queue: INotif[] = [];\n\n    constructor() { }\n\n    public add(notif: INotif) {\n        console.log(notif);\n        this.queue.push(notif);\n    }\n\n    public remove(idx: number) {\n        this.queue.splice(idx, 1);\n    }\n\n    public get(): Observable<INotif[]> {\n        return of(this.queue);\n    }\n\n    public clicked(notif: INotif) {\n        console.log(notif);\n    }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { TwaMd2NotificationsService, INotif } from './twa-md2-notifications.service';\nimport { Observable } from 'rxjs';\n// import { EventEmitter } from 'protractor';\n\n@Component({\n    selector: 'twa-md2-notifications',\n    template: `\n        <button mat-icon-button #overlayOrigin=\"cdkOverlayOrigin\" cdkOverlayOrigin (click)=\"notifClicked()\">\n            <mat-icon *ngIf=\"notifs.length\">notifications</mat-icon>\n            <mat-icon *ngIf=\"notifs.length===0\">notifications_none</mat-icon>\n        </button>\n        <ng-template\n            cdkConnectedOverlay\n            [cdkConnectedOverlayOrigin]=\"overlayOrigin\"\n            [cdkConnectedOverlayOpen]=\"isOpened\"\n            (detach)=\"connectedOverlayDetach()\"\n        >\n            <div class=\"notifPanelContainer\" fxLayoutGap=\"12px\">\n                <div fxLayout=\"row\" class=\"panelTitle\">\n                    <h3 fxFlex>Notifications</h3>\n                    <button mat-icon-button (click)=\"clearPanels()\">\n                        <mat-icon>clear_all</mat-icon>\n                    </button>\n                </div>\n                <mat-card *ngFor=\"let notif of notifs; let i = index\" fxLayout=\"row\" class=\"notif\" (click)=\"notifPanelClicked(notif, i)\">\n                    <div class=\"cicon\">\n                        <mat-icon class=\"panelIcon\" *ngIf=\"!notif.image\">notifications</mat-icon>\n                        <img class=\"notifImage\" *ngIf=\"notif.image\" [src]=\"notif.image\" />\n                    </div>\n                    <div class=\"ccontent\" fxLayout=\"column\">\n                        <div fxLayout=\"row\">\n                            <h4 fxFlex>{{notif.title}}</h4>\n                            <button class=\"close\" mat-icon-button (click)=\"removePanel(i)\">\n                                <mat-icon>close</mat-icon>\n                            </button>\n                        </div>\n                        <p fxFlex>{{notif.message}}</p>\n                    </div>\n                </mat-card>\n                <div class=\"notifPanelHideButton\" (click)=\"isOpened = false\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                    <mat-icon>expand_less</mat-icon>\n                </div>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        '.notifPanelContainer { width: 320px; background: #eee; border: 1px solid #ccc;' +\n                               'padding: 12px 12px 4px 12px; box-shadow: 0 2px 10px rgba(0,0,0,.2); }',\n        '.notifPanelHideButton { width: 100%; height: 18px; border-top: 1px solid #ccc; cursor: pointer; }',\n        'div.panelTitle h3 { color: #aaa; font-weight: 900; font-family: Roboto Light; font-size: 26px; margin: 8px; }',\n        'mat-card.notif { cursor: pointer; padding: 12px 12px 12px 8px; margin: 0 0 8px 0!important; }',\n        'mat-card.notif h4 { font-family: Roboto Light; font-size: 16px; margin: 8px 0 0; }',\n        'mat-card.notif p { font-family: Roboto Light; margin: 8px 0 0; }',\n        '.cicon { padding: 12px 12px 12px 4px; }',\n        '.ccontent { width: 100%; }',\n        'mat-icon.panelIcon { font-size: 40px; height: 40px; width: 40px; line-height: 40px; }',\n        'img.notifImage { width: 40x; height: 40px; border-radius: 50%; }',\n        'button.close { margin: -12px -12px 0 0;}',\n    ]\n})\nexport class TwaMd2NotificationsComponent implements OnInit {\n    @Input() notifsService: TwaMd2NotificationsService;\n    @Output() panelClicked: EventEmitter<any> = new EventEmitter();\n\n    isOpened = false;\n    notifs: INotif[];\n\n    constructor() { }\n\n    ngOnInit() {\n        this.notifsService.get().subscribe(data => {\n            this.notifs = data;\n        });\n    }\n\n    notifClicked() {\n        console.log('notif icon clicked!');\n        if (!this.isOpened && !this.notifs.length) {\n            return;\n        }\n        this.isOpened = !this.isOpened;\n    }\n\n    notifPanelClicked(notif: INotif, notifIdx: number) {\n        console.log('notif panel clicked!', notif);\n        if (typeof notif.data !== 'undefined' &&\n        typeof notif.data.action !== 'undefined') {\n            notif.data.action(notif);\n        } else {\n            this.panelClicked.emit(notif);\n        }\n        this.notifsService.remove(notifIdx);\n        this.checkIfOpened();\n    }\n\n    checkIfOpened() {\n        if (this.notifs.length === 0) {\n            this.isOpened = false;\n        }\n    }\n\n    removePanel(notifIdx: number) {\n        this.notifsService.remove(notifIdx);\n        this.checkIfOpened();\n    }\n\n    clearPanels() {\n        if (this.notifs.length) {\n            this.notifs.splice(0, 1);\n            setTimeout(() => {\n                this.clearPanels();\n            }, 200);\n        } else {\n            this.checkIfOpened();\n        }\n    }\n\n    connectedOverlayDetach() {\n        console.log('overlay detached!');\n    }\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCardModule } from '@angular/material/card';\n// import { TwaMd2NotificationsService } from './twa-md2-notifications.service';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { OverlayModule } from '@angular/cdk/overlay';\n\nimport { TwaMd2NotificationsComponent } from './twa-md2-notifications.component';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlexLayoutModule,\n        MatCardModule,\n        MatButtonModule,\n        MatIconModule,\n        OverlayModule,\n        // TwaMd2NotificationsComponent,\n    ],\n    declarations: [\n        TwaMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    exports: [\n        OverlayModule,\n        TwaMd2NotificationsComponent,\n        // TwaMd2NotificationsService,\n    ],\n    entryComponents: [\n        TwaMd2NotificationsComponent,\n    ],\n    providers: [\n        TwaMd2NotificationsComponent,\n    ],\n    schemas: [\n        CUSTOM_ELEMENTS_SCHEMA\n    ]\n})\nexport class TwaMd2NotificationsModule { }\n"],"names":[],"mappings":"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"}
