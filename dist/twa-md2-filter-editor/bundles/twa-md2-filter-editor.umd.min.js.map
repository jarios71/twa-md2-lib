{"version":3,"sources":["../../projects/twa-md2-filter-editor/src/lib/twa-md2-filter-editor.service.ts","../../projects/twa-md2-filter-editor/src/lib/twa-md2-filter-editor.component.ts","../../projects/twa-md2-filter-editor/src/lib/twa-md2-filter-editor.module.ts"],"names":["TWAFilterEditorService","_this","this","processFilterOrs","filters","actualFilter","newFilters","forEach","v","i","bitwise","push","isgroup","newGroup","Object","assign","fields","filterData","filter","filterValue","comparators","=>","a","b","includes","===",">=",">","<=","<","in","split","isNumeric","n","isNaN","parseFloat","isFinite","retValue","filterGroup","prepareData","field","operation","value","String","toLowerCase","_a","results","l","results2","reduce","acc","v2","length","prototype","init","data","change","subscribe","applyFilter","processedFilters","activeFilters","slice","map","item","idx","realIndex","applyFilterToRow","this_1","Injectable","TWAFilterEditorComponent","EventEmitter","selectedField","selectedValue","editing","texts","filterBy","group","ungroup","moveLeft","moveRight","openFilter","saveFilter","clearSelection","clearAll","operations","contain","equal","greaterEqual","greater","lessEqual","less","operationsData","type","label","operator","arrayMove","arr","oldIndex","newIndex","k","undefined","splice","handleKeyboardEvent","event","keyCode","addFilter","openFilters","fileObj","document","getElementById","files","reader","FileReader","onload","JSON","parse","result","emit","readAsText","saveFilters","blob","Blob","stringify","element","createElement","href","window","URL","createObjectURL","download","body","appendChild","click","checkFilter","sendFilter","color","dbfield","name","explanation","filterOptions","selectFilter","selected","getParentFilter","selectedAll","tmpfilter","getParentFilterInGroup","filter2","ret","moveTo","direction","toIdx","tmpidx","tmpidx2","getSelected","getInGroup","acc2","clearSelectionInGroup","changeBitwise","groupSelected","groupSelectedInGroup","ret2","groups","entireGroupSelected","entireGroupSelectedInGroup","selected2","ig","lg","ig2","lg2","createGroup","resultFilter","createInGroup","resultFilter2","groupPosition2","findIndex","groupPosition","sanitizeGroups","sanitizeGroupsInGroup","parent","removeFromGroup","removeFromGroupInGroup","idx2","tmpFilters","onStartDragFilter","_event","_filter","onDroppedFilter","console","log","previousIndex","currentIndex","uploadSet","lines","val","join","fileSet","nativeElement","removeFilter","clearFilters","onFocus","onBlur","ngOnInit","options","config","Component","args","selector","template","Input","Output","ViewChild","static","HostListener","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","MatIconModule","MatSelectModule","MatChipsModule","MatInputModule","MatButtonModule","FlexLayoutModule","MatTooltipModule","MatMenuModule","DragDropModule","declarations","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { TWAFilterEditorComponent } from './twa-md2-filter-editor.component';\nimport { FieldFilter } from './twa-md2-filter-editor.interface';\n\n@Injectable()\nexport class TWAFilterEditorService {\n\n    filters: FieldFilter[];\n\n    filteredData: any[];\n    filter: TWAFilterEditorComponent;\n    data: any[];\n    prepareData: Function;\n    processedFilters: any[];\n\n    init(\n        filter: TWAFilterEditorComponent,\n        data: any[],\n        prepareData?: Function\n    ) {\n        this.filter = filter;\n        this.data = data;\n        this.prepareData = prepareData;\n\n        this.filter.change.subscribe((filters: FieldFilter[]) => {\n            this.filters = filters;\n            this.applyFilter();\n        });\n        this.processedFilters = this.processFilterOrs(this.filter.activeFilters);\n    }\n\n    applyFilter(data = this.data.slice()) {\n\n        // let data = this.data.slice();\n        let ret = true;\n        const length = data.length;\n\n        if (!this.filter) {\n            return data;\n        }\n\n        this.processedFilters = this.processFilterOrs(this.filter.activeFilters);\n\n        this.data = data;\n\n        data = data.map((item, idx) => {\n            item.realIndex = idx;\n            return item;\n        }).filter((item: any) => {\n            ret = this.applyFilterToRow(item);\n            return ret;\n        });\n\n        return data;\n\n    }\n\n    applyFilterToRow(item) {\n\n        let ret = true;\n        const results = [];\n\n        for (let i = 0, l = this.processedFilters.length; i < l; i++) {\n            const results2 = [];\n            this.processedFilters[i].forEach((v: FieldFilter) => {\n                results2.push(this.filterData(v, item));\n            });\n            results.push(results2.reduce((acc, v) => {\n                if (!v) {\n                    acc = v;\n                }\n                return acc;\n            }, true));\n        }\n\n        if (results.length) {\n            ret = results.reduce((acc, v) => {\n                if (v) {\n                    acc = v;\n                }\n                return acc;\n            }, false);\n        } else {\n            ret = true;\n        }\n\n        return ret;\n\n    }\n\n    processFilterOrs = (filters) => {\n        let actualFilter = 0;\n        const newFilters = [];\n        filters.forEach((v, i) => {\n            if (i > 0 && v.bitwise === '||') {\n                actualFilter++;\n                newFilters.push([]);\n            }\n            if (typeof(newFilters[actualFilter]) === 'undefined') {\n                newFilters.push([]);\n            }\n            if (v.isgroup) {\n                const newGroup = {...v, fields: this.processFilterOrs(v.fields)};\n                // console.log(newGroup);\n                newFilters[actualFilter].push(newGroup);\n            } else {\n                newFilters[actualFilter].push(v);\n            }\n        });\n\n        return newFilters;\n    }\n\n    filterData = (filter: any, filterValue: any) => {\n\n      const comparators = {\n        '=>': (a: string, b: string) => a.includes(b),\n        '===': (a: any, b: any) => a === b,\n        '>=': (a: any, b: any) => a >= b,\n        '>': (a: any, b: any) => a > b,\n        '<=': (a: any, b: any) => a <= b,\n        '<': (a: any, b: any) => a < b,\n        'in': (a: any, b: any) => b.split(',').includes(a),\n      };\n      const isNumeric = (n) => {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n      };\n\n      let retValue = false;\n\n      if (filter.isgroup) {\n        retValue = this.filterGroup(filter, filterValue);\n      } else {\n        if (this.prepareData) {\n            this.prepareData(filter, filterValue);\n        }\n        try {\n          if (typeof filterValue[filter.field] === 'number' && (filter.operation !== '=>' && filter.operation !== 'in')) {\n            retValue = comparators[filter.operation](+filterValue[filter.field], +filter.value);\n          } else if ((!isNumeric(filterValue[filter.field]) || !isNumeric(filter.value)) &&\n              (typeof filterValue[filter.field] === 'string' || filterValue[filter.field] instanceof String)) {\n            retValue = comparators[filter.operation](String(filterValue[filter.field]).toLowerCase(),\n                                                      String(filter.value).toLowerCase());\n          } else if (isNumeric(filterValue[filter.field]) && isNumeric(filter.value)) {\n            retValue = comparators[filter.operation](+filterValue[filter.field], +filter.value);\n          } else {\n            retValue = comparators[filter.operation](filterValue[filter.field], filter.value);\n          }\n        } catch {\n            retValue = false;\n        }\n      }\n\n      return retValue;\n\n    }\n\n    filterGroup = (filter: any, filterValue: any) => {\n\n        const results = [];\n\n        for (let i = 0, l = filter.fields.length; i < l; i++) {\n            const results2 = [];\n            filter.fields[i].forEach((v: any[]) => {\n               results2.push(this.filterData(v, filterValue));\n            });\n            results.push(results2.reduce((acc, v2) => {\n                if (!v2) {\n                    acc = v2;\n                }\n                return acc;\n            }, true));\n        }\n\n        return results.reduce((acc, v) => {\n            if (v) {\n                acc = v;\n            }\n            return acc;\n        }, false);\n\n    }\n}\n","import { Component, OnInit, Input, Output, ElementRef, EventEmitter, ViewChild } from '@angular/core';\nimport { HostListener } from '@angular/core';\n\nimport { FilterEditorOptions, FieldFilter, FilterEditorConfig } from './twa-md2-filter-editor.interface';\n\n@Component({\n  selector: 'twa-md2-filter-editor',\n  templateUrl: './twa-md2-filter-editor.component.html',\n  styles: [\n    `\n    .error { color: red; }\n    .selector {\n        width: 100%;\n    }\n    .filter {\n        padding-bottom: 12px;\n    }\n    .filter mat-chip {\n        margin: 4px;\n    }\n    .cgroup {\n        display: flex;\n    }\n    mat-chip.selected {\n        color: #fff;\n        font-weight: bold;\n    }\n    span.group-start,\n    span.group-end {\n        font-size: 25px;\n    }\n    button.bitwise {\n        min-width: 24px;\n        padding-left: 0;\n        padding-right: 0;\n    }\n    `\n  ]\n})\n\nexport class TWAFilterEditorComponent implements OnInit {\n\n    @Input() options: FilterEditorOptions;\n    @Input() config: FilterEditorConfig;\n    @Output() change: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    @ViewChild('fileSet', {static: true}) fileSet: ElementRef;\n    @ViewChild('oepnFiltersFile', {static: true}) openFiltersFile: ElementRef;\n\n    filterOptions: FilterEditorOptions;\n    selectedField = 'none';\n    selectedValue = '';\n    operation = 'contain';\n    activeFilters: FieldFilter[] = [];\n    editing = false;\n    texts = {\n        filterBy: 'Filter by...',\n        filter: 'filter',\n        group: 'Group',\n        ungroup: 'Ungroup',\n        moveLeft: 'Move to left',\n        moveRight: 'Move to right',\n        openFilter: 'Open saved filter',\n        saveFilter: 'Save filter',\n        clearSelection: 'Clear selection',\n        clearAll: 'Clear filters',\n\n    };\n    operations: any = {\n        contain: '=>',\n        equal: '===',\n        greaterEqual: '>=',\n        greater: '>',\n        lessEqual: '<=',\n        less: '<',\n        in: 'in',\n    };\n    operationsData = [\n        {\n            type: 'contain',\n            label: 'contains',\n            operator: '=>'\n        },\n        {\n            type: 'equal',\n            label: 'equals',\n            operator: '==='\n        },\n        {\n            type: 'greaterEqual',\n            label: 'greater or equal',\n            operator: '>='\n        },\n        {\n            type: 'greater',\n            label: 'greater',\n            operator: '>'\n        },\n        {\n            type: 'lessEqual',\n            label: 'less or equal',\n            operator: '<='\n        },\n        {\n            type: 'less',\n            label: 'less',\n            operator: '<'\n        },\n        {\n            type: 'in',\n            label: 'in',\n            operator: 'in'\n        },\n    ];\n\n    @HostListener('document:keydown', ['$event'])\n    handleKeyboardEvent(event: KeyboardEvent) {\n      // if ((event.key === 'c' && event.ctrlKey)) {\n      //     this.clearFilters();\n      // } else if (this.editing && event.keyCode === 13) {\n      //     this.addFilter();\n      // }\n      if (this.editing && event.keyCode === 13) {\n        this.addFilter();\n      }\n    }\n\n    constructor() {}\n\n    openFilters() {\n        const fileObj = (<HTMLInputElement>document.getElementById('openFiltersFile')).files[0];\n        const reader = new FileReader();\n        reader.onload = () => {\n            // console.log(reader.result);\n            const data = JSON.parse(<string>reader.result);\n            this.activeFilters = data;\n            this.change.emit(this.activeFilters);\n        };\n        reader.readAsText(fileObj);\n    }\n\n    saveFilters() {\n        const blob = new Blob([JSON.stringify(this.activeFilters)], { type: 'text/json' });\n        const filename = 'filters.json';\n        const element = document.createElement('a');\n        element.href = window.URL.createObjectURL(blob);\n        element.download = filename;\n        document.body.appendChild(element);\n        element.click();\n    }\n\n    checkFilter(): boolean {\n        return (this.selectedField === 'none' || this.selectedValue === '');\n    }\n\n    sendFilter() {\n        this.addFilter();\n    }\n\n    addFilter() {\n\n        // console.log('adding filter...');\n\n        let color = '',\n            field = '',\n            dbfield = '',\n            label = '',\n            name = '',\n            explanation = this.selectedField + ' ' + this.operations[this.operation] + ' ' + this.selectedValue;\n\n        for (let i = 0, l = this.filterOptions.fields.length; i < l; i++) {\n            if (this.filterOptions.fields[i].name === this.selectedField) {\n                // color = this.filterOptions.fields[i].color;\n                // field = this.filterOptions.fields[i].field;\n                // label = this.filterOptions.fields[i].label;\n                // name = this.filterOptions.fields[i].name;\n                /**\n                 * ...with object destructuring\n                 */\n                ({ color, field, dbfield, label, name } = this.filterOptions.fields[i]);\n                break;\n            }\n        }\n        if (this.operation === 'in') {\n            explanation = this.selectedField + ' ' + this.operations[this.operation] + ' (...)';\n        } else if (this.operation === 'contain') {\n            // explanation = this.selectedField + ' ' + this.operations[this.operation] + ' ' + this.selectedValue;\n            explanation = '\"' + this.selectedValue + '\" ' + this.operations[this.operation] + ' ' + this.selectedField;\n        }\n        this.activeFilters.push({\n            color: color,\n            explanation: explanation,\n            label: label,\n            name: name,\n            field: field,\n            dbfield: dbfield,\n            bitwise: '&&',\n            operation: this.operations[this.operation],\n            value: this.selectedValue\n        });\n        this.selectedValue = '';\n        // console.log(this.activeFilters);\n        this.change.emit(this.activeFilters);\n    }\n\n    selectFilter(filter: FieldFilter) {\n        filter.selected = !filter.selected;\n        const group = this.getParentFilter(filter);\n        if (group) {\n            let selectedAll = true;\n            for (let i = 0, l = group.fields.length; i < l; i++) {\n                const tmpfilter = group.fields[i];\n                if (!tmpfilter.isgroup && !tmpfilter.selected) {\n                    selectedAll = false;\n                }\n            }\n            if (selectedAll) {\n                group.selected = true;\n            }\n        }\n    }\n\n    getParentFilter(filter: FieldFilter): FieldFilter | null {\n        const getParentFilterInGroup = (group: FieldFilter, filter2: FieldFilter): FieldFilter | null => {\n            ret = null;\n\n            for (let i = 0, l = group.fields.length; i < l; i++) {\n                const tmpfilter = group.fields[i];\n                if (JSON.stringify(tmpfilter) === JSON.stringify(filter2)) {\n                    return group;\n                } else if (tmpfilter.isgroup) {\n                    ret = getParentFilterInGroup(tmpfilter, filter2);\n                }\n            }\n\n            return ret;\n        };\n        let ret = null;\n        for (let i = 0, l = this.activeFilters.length; i < l; i++) {\n            const tmpfilter = this.activeFilters[i];\n            if (JSON.stringify(tmpfilter) === JSON.stringify(filter)) {\n                return null;\n            } else if (tmpfilter.isgroup) {\n                ret = getParentFilterInGroup(tmpfilter, filter);\n            }\n        }\n\n        return ret;\n    }\n\n    arrayMove = (arr: any[], oldIndex: number, newIndex: number): any[] => {\n        if (newIndex > arr.length) {\n            let k = newIndex - arr.length;\n            while (k--) {\n                arr.push(undefined);\n            }\n        }\n        arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);\n        return arr;\n    }\n\n    moveTo(direction: number) {\n        let idx = -1,\n            toIdx = -1,\n            group = -1;\n        // Searching the selected filter...\n        this.activeFilters.forEach((filter, tmpidx) => {\n            if (filter.selected) {\n                idx = tmpidx;\n                return;\n            } else if (filter.isgroup) {\n                filter.fields.forEach((filter2, tmpidx2) => {\n                    if (filter2.selected) {\n                        idx = tmpidx2;\n                        group = tmpidx;\n                        return;\n                    }\n                });\n            }\n        });\n\n        if (idx >= 0) {\n\n            if (group >= 0) {\n                toIdx = (idx + direction) >= 0 ? idx + direction : this.activeFilters[group].fields.length + direction;\n                if (toIdx >= this.activeFilters[group].fields.length) {\n                    toIdx = 0;\n                }\n                this.activeFilters[group].fields = this.arrayMove(this.activeFilters[group].fields, idx, toIdx);\n            } else {\n                toIdx = (idx + direction) >= 0 ? idx + direction : this.activeFilters.length + direction;\n                if (toIdx >= this.activeFilters.length) {\n                    toIdx = 0;\n                }\n                this.activeFilters = this.arrayMove(this.activeFilters, idx, toIdx);\n            }\n\n        }\n\n        this.change.emit(this.activeFilters);\n\n    }\n\n    getSelected(): number {\n        const getInGroup = (group: FieldFilter) => {\n            return group.fields.reduce((acc2, filter) => {\n                if (filter.isgroup) {\n                    acc2 += getInGroup(filter);\n                } else if (filter.selected) {\n                    acc2++;\n                }\n                return acc2;\n            }, 0);\n        };\n        return this.activeFilters.reduce((acc, filter) => {\n            if (filter.isgroup) {\n                acc += getInGroup(filter);\n            } else if (filter.selected) {\n                acc++;\n            }\n            return acc;\n        }, 0);\n\n    }\n\n    clearSelection(): void {\n\n        const clearSelectionInGroup = (group) => {\n            group.fields.forEach((filter) => {\n                if (filter.isgroup) {\n                    filter = clearSelectionInGroup(filter);\n                } else {\n                    filter.selected = false;\n                }\n            });\n\n            return group;\n        };\n\n        this.activeFilters = this.activeFilters.map((filter) => {\n            if (filter.isgroup) {\n                filter = clearSelectionInGroup(filter);\n                // filter.fields = filter.fields.map((filter2) => {\n                //     filter2.selected = false;\n                //     return filter2;\n                // });\n            }\n            filter.selected = false;\n            return filter;\n        });\n\n    }\n\n    changeBitwise(filter: FieldFilter, bitwise) {\n        filter.bitwise = bitwise;\n        this.change.emit(this.activeFilters);\n    }\n\n    groupSelected(): boolean {\n        const groupSelectedInGroup = (filter: FieldFilter) => {\n            let ret2 = 0;\n            if (filter.isgroup) {\n                filter.fields.forEach((filter2) => {\n                    if (filter2.isgroup) {\n                        ret2 += groupSelectedInGroup(filter2);\n                    } else {\n                        if (filter2.selected) {\n                            ret2++;\n                        }\n                    }\n                });\n                return ret2;\n            } else {\n                if (filter.selected) {\n                    return 1;\n                }\n            }\n        };\n        const groups = this.activeFilters.filter(filter => filter.isgroup);\n        let ret = 0;\n        groups.forEach((group) => {\n            group.fields.forEach(filter => {\n                if (filter.isgroup) {\n                    ret += groupSelectedInGroup(filter);\n                } else if (filter.selected) {\n                    ret++;\n                }\n            });\n        });\n        return ret > 0;\n    }\n\n    entireGroupSelected(): boolean {\n        const entireGroupSelectedInGroup = (group: FieldFilter) => {\n            let selected2 = true;\n\n            for (let i = 0, l = group.fields.length; i < l; i++) {\n                const filter = group.fields[i];\n                if (filter.isgroup) {\n                    selected2 = entireGroupSelectedInGroup(filter);\n                    if (selected2) {\n                        return true;\n                    }\n                } else if (!filter.selected) {\n                    selected2 = false;\n                }\n            }\n            return selected2 && group.fields.length > 0;\n        };\n        const groups = this.activeFilters.filter(filter => filter.isgroup);\n        let selected = true;\n        for (let ig = 0, lg = groups.length; ig < lg; ig++) {\n            const group = groups[ig];\n            for (let ig2 = 0, lg2 = group.fields.length; ig2 < lg2; ig2++) {\n                const filter = group.fields[ig2];\n                if (filter.isgroup) {\n                    selected = entireGroupSelectedInGroup(filter);\n                    if (selected) {\n                        return true;\n                    }\n                } else if (!filter.selected) {\n                    selected = false;\n                }\n            }\n            group.fields.forEach(filter => {\n            });\n            if (selected) {\n                return true;\n            }\n        }\n        groups.forEach((group) => {\n        });\n        return selected && groups.length > 0;\n    }\n\n    createGroup(): void {\n        const createInGroup = (filter: FieldFilter) => {\n            const selected2 = filter.fields.filter(filter2 => filter2.selected),\n            groupPosition2 = filter.fields.findIndex(v => v.selected);\n            let resultFilter2: FieldFilter[];\n            if (selected2.length) {\n                resultFilter2 = filter.fields.filter(filter2 => !filter2.selected);\n                resultFilter2.splice(groupPosition2, 0, {\n                    color: '',\n                    name: '',\n                    field: '',\n                    isgroup: true,\n                    bitwise: '&&',\n                    fields: selected2\n                });\n            } else {\n                resultFilter2 = filter.fields.map(filter2 => {\n                    if (filter2.isgroup) {\n                        createInGroup(filter2);\n                    }\n                    return filter2;\n                });\n            }\n            filter.fields = resultFilter2;\n        };\n\n        const selected = this.activeFilters.filter(filter => filter.selected),\n              groupPosition = this.activeFilters.findIndex(v => v.selected);\n        let resultFilter: FieldFilter[];\n        if (selected.length) {\n            resultFilter = this.activeFilters.filter(filter => !filter.selected);\n            resultFilter.splice(groupPosition, 0, {\n                color: '',\n                name: '',\n                field: '',\n                isgroup: true,\n                bitwise: '&&',\n                fields: selected\n            });\n            this.activeFilters = resultFilter;\n        } else {\n            resultFilter = this.activeFilters.map(filter => {\n                if (filter.isgroup) {\n                    createInGroup(filter);\n                }\n                return filter;\n            });\n        }\n        this.clearSelection();\n        this.change.emit(this.activeFilters);\n    }\n\n    sanitizeGroups() {\n        const sanitizeGroupsInGroup = (group, parent?: FieldFilter) => {\n            group.fields.map((filter: FieldFilter, idx: number) => {\n                if (filter.isgroup) {\n                    if (filter.fields.length === 0) {\n                        group.fields.splice(idx, 1);\n                    } else if (filter.fields.length === 1) {\n                        // group.fields.push({...filter.fields[0]});\n                        group.fields.splice(idx, 1, {...filter.fields[0]});\n                    } else {\n                        sanitizeGroupsInGroup(filter, group);\n                    }\n                }\n            });\n        };\n        this.activeFilters.map((filter: FieldFilter, idx: number) => {\n            if (filter.isgroup) {\n                if (filter.fields.length === 0) {\n                    this.activeFilters.splice(idx, 1);\n                } else if (filter.fields.length === 1) {\n                    // this.activeFilters.push({...filter.fields[0]});\n                    this.activeFilters.splice(idx, 1, {...filter.fields[0]});\n            } else {\n                    sanitizeGroupsInGroup(filter);\n                }\n            }\n        });\n    }\n\n    removeFromGroup(): void {\n        const removeFromGroupInGroup = (group: FieldFilter, parent: FieldFilter, idx) => {\n            group.fields.forEach((filter2, idx2) => {\n                if (filter2.isgroup) {\n                    removeFromGroupInGroup(filter2, group, idx2);\n                }\n            });\n            const tmpFilters = group.fields.filter((filter2: FieldFilter) => filter2.selected);\n            group.fields = group.fields.filter((filter2: FieldFilter) => !filter2.selected);\n            tmpFilters.forEach((v: FieldFilter) => {\n                v.selected = false;\n                parent.fields.push(v);\n            });\n            if (group.fields.length === 0) {\n                parent.fields.splice(idx, 1);\n            }\n        };\n\n        this.activeFilters = this.activeFilters.reduce((newFilters, filter) => {\n            if (filter.isgroup) {\n\n                filter.fields.forEach((filter2, idx) => {\n                    if (filter2.isgroup) {\n                        removeFromGroupInGroup(filter2, filter, idx);\n                    }\n                });\n\n                const tmpFilters = filter.fields.filter(filter2 => filter2.selected);\n                filter.fields = filter.fields.filter(filter2 => !filter2.selected);\n                if (filter.fields.length) {\n                    newFilters.push(filter);\n                }\n                tmpFilters.forEach(v => {\n                    newFilters.push(v);\n                });\n            } else {\n                newFilters.push(filter);\n            }\n            return newFilters;\n        }, []);\n        this.clearSelection();\n        this.sanitizeGroups();\n        this.change.emit(this.activeFilters);\n    }\n\n    onStartDragFilter(_event, _filter) {\n    }\n\n    onDroppedFilter(event) {\n      console.log('dropped');\n      this.arrayMove(this.activeFilters, event.previousIndex, event.currentIndex);\n      console.log(this.activeFilters);\n        // this.clearSelection();\n        this.sanitizeGroups();\n        this.change.emit(this.activeFilters);\n    }\n\n    uploadSet() {\n        const fileObj = (<HTMLInputElement>document.getElementById('fileSet')).files[0];\n        const reader = new FileReader();\n        reader.onload = () => {\n            const lines = (<string>reader.result).split(/\\r?\\n/).filter(val => val > '');\n            this.selectedValue = lines.join(', ');\n            this.fileSet.nativeElement.value = '';\n        };\n        reader.readAsText(fileObj);\n    }\n\n    removeFilter(filter: FieldFilter): void {\n        // const removeFilterInGroup = (group, filter) => {\n\n        // };\n        const parent = this.getParentFilter(filter);\n        let group: FieldFilter[];\n        if (parent) {\n            group = parent.fields;\n        } else {\n            group = this.activeFilters;\n        }\n        for (let i = 0, l = group.length; i < l; i++) {\n            if (JSON.stringify(group[i]) === JSON.stringify(filter)) {\n                group.splice(i, 1);\n                break;\n            }\n        }\n        this.sanitizeGroups();\n        this.change.emit(this.activeFilters);\n    }\n\n    clearFilters() {\n        this.activeFilters = [];\n        this.change.emit(this.activeFilters);\n    }\n\n    onFocus(event) {\n        this.editing = true;\n    }\n\n    onBlur(event) {\n        this.editing = false;\n    }\n\n    ngOnInit() {\n        this.filterOptions = this.options;\n        this.selectedField = (typeof this.filterOptions.fields[0] !== 'undefined') ? this.filterOptions.fields[0].name : 'none';\n        if (typeof this.config !== undefined) {\n            if (this.config && typeof this.config.operationsData !== 'undefined') {\n                this.operationsData = this.config.operationsData;\n            }\n            if (this.config && typeof this.config.filter !== 'undefined') {\n                this.activeFilters = this.config.filter.slice();\n            }\n            if (this.config && typeof this.config.texts !== 'undefined') {\n                this.texts = {...this.texts, ...this.config.texts};\n            }\n        }\n        // this.filterOptions = JSON.parse(this.options);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { DragDropModule } from '@angular/cdk/drag-drop';\n\nimport { TWAFilterEditorComponent } from './twa-md2-filter-editor.component';\nimport { TWAFilterEditorService } from './twa-md2-filter-editor.service';\nimport { FieldFilter } from './twa-md2-filter-editor.interface';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        MatSelectModule,\n        MatChipsModule,\n        MatInputModule,\n        MatButtonModule,\n        FlexLayoutModule,\n        MatTooltipModule,\n        MatMenuModule,\n        DragDropModule,\n    ],\n    declarations: [\n        TWAFilterEditorComponent,\n    ],\n    exports: [\n        TWAFilterEditorComponent,\n    ],\n    providers: [\n        TWAFilterEditorService\n    ]\n})\nexport class TWAFilterEditorModule {}\n"]}