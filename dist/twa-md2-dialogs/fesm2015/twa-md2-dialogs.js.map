{"version":3,"file":"twa-md2-dialogs.js.map","sources":["ng://twa-md2-dialogs/lib/confirm-dialog/twa-confirm-dialog.component.ts","ng://twa-md2-dialogs/lib/prompt-dialog/twa-prompt-dialog.component.ts","ng://twa-md2-dialogs/lib/twa-dialogs.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\nimport { SafeHtml } from '@angular/platform-browser';\n\n@Component({\n    selector: 'twa-app-confirm-dialog',\n    // templateUrl: './twa-confirm-dialog.component.html',\n    // styleUrls: ['./twa-confirm-dialog.component.css'],\n    template: `\n    <h2>{{ title }}</h2>\n    <p [innerHtml]=\"messageHtml\"></p>\n\n    <button type=\"button\" mat-raised-button\n        (click)=\"dialogRef.close(true)\">{{ okText }}</button>\n    <button type=\"button\" mat-button *ngIf=\"cancelText > ''\"\n        (click)=\"dialogRef.close()\">{{ cancelText }}</button>\n    `\n})\n\nexport class TWAConfirmDialogComponent {\n\n    public title: string;\n    public message: string;\n    public messageHtml: SafeHtml;\n    public okText: string;\n    public cancelText: string;\n\n    constructor(public dialogRef: MatDialogRef<TWAConfirmDialogComponent>) {\n\n    }\n}\n","import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { map, startWith } from 'rxjs/operators';\n\nexport interface ITWAPromptField {\n    key: string;\n    label: string;\n    type: string;\n    fxFlex: string;\n    value: string;\n    options: any[];\n    autocomplete: any;\n    rows: any[];\n    validation: any;\n}\n\n@Component({\n    selector: 'twa-app-prompt-dialog',\n    // templateUrl: './twa-prompt-dialog.component.html',\n    // styleUrls: ['./twa-prompt-dialog.component.css']\n    styles: ['.mat-error { display: block; margin: -15px 0 15px; }'],\n    template: `\n    <h2>{{ title }}</h2>\n    <p [innerHtml]=\"messageHtml\"></p>\n\n    <form novalidate (ngSubmit)=\"onSubmit(form.value)\" [formGroup]=\"form\" fxLayout=\"row wrap\" fxLayoutGap=\"10px\">\n        <div *ngFor=\"let prop of fields\" fxFlex=\"{{prop.fxFlex ? ('calc(' + prop.fxFlex + ' - 10px)') : '100%'}}\" fxLayout=\"column\">\n            <div [ngSwitch]=\"prop.type\" fxFlex=\"100%\">\n                <div *ngSwitchCase=\"'text'\">\n                    <mat-form-field *ngIf=\"!prop.autocomplete\" fxFlex>\n                        <input matInput placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\" [type]=\"prop.type\" fxFlex>\n                    </mat-form-field>\n                    <div *ngIf=\"prop.autocomplete\" fxFlex>\n                        <mat-form-field fxFlex>\n                            <input matInput placeholder=\"{{prop.label}}\"\n                                [formControlName]=\"prop.key\"\n                                [matAutocomplete]=\"auto\"\n                                (blur)=\"acCheckBlur(prop)\"\n                                [id]=\"prop.key\" [type]=\"prop.type\">\n                        </mat-form-field>\n                        <mat-autocomplete #auto=\"matAutocomplete\"\n                            (optionSelected)=\"acClick(prop, $event)\">\n                            <mat-option *ngFor=\"let option of prop.autocomplete.filteredOptions | async\"\n                                [value]=\"option\">\n                            {{ option }}\n                            </mat-option>\n                        </mat-autocomplete>\n                    </div>\n                </div>\n                <div *ngSwitchCase=\"'textarea'\">\n                    <mat-form-field fxFlex>\n                        <textarea matInput placeholder=\"{{prop.label}}\" rows=\"{{prop.rows||'3'}}\" autosize\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\" [type]=\"prop.type\"></textarea>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'number'\">\n                    <mat-form-field fxFlex>\n                        <input matInput placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\" [type]=\"prop.type\">\n                   </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'date'\">\n                    <mat-form-field fxFlex>\n                        <input matInput [matDatepicker]=picker placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\">\n                        <mat-datepicker #picker></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'time'\">\n                    <mat-form-field fxFlex>\n                        <input matInput [ngxTimepicker]=\"tpicker\" placeholder=\"{{prop.label}}\"\n                            [format]=\"24\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\">\n                        <ngx-material-timepicker #tpicker></ngx-material-timepicker>\n                    </mat-form-field>\n                </div>\n\n                <div *ngSwitchCase=\"'radio'\" fxLayout=\"column\">\n                    <div _ngcontent-c20=\"\" style=\"height: 20px;\">\n                        <label _ngcontent-c20=\"\" style=\"transform: translateY(-1.28125em) scale(0.75)\n                                perspective(100px)\n                                translateZ(0.001px);\n                                -ms-transform: translateY(-1.28125em)\n                                scale(0.75);width: 133.33333333%;margin: 20px 0 0 0;font-weight: 100;color: #666;\">\n                            {{prop.label}}\n                        </label>\n                    </div>\n                    <mat-radio-group [formControlName]=\"prop.key\" [name]=\"prop.key\" fxLayout=\"column\" style=\"margin-top: 14px;\">\n                        <mat-radio-button [value]=\"option.value\" *ngFor=\"let option of prop.options\">\n                            {{option.label}}\n                        </mat-radio-button>\n                    </mat-radio-group>\n                </div>\n\n                <div *ngSwitchCase=\"'select'\">\n                    <mat-form-field fxFlex>\n                        <mat-select [formControlName]=\"prop.key\" placeholder=\"{{prop.label}}\">\n                            <mat-option *ngFor=\"let option of prop.options\" [value]=\"option.value\">\n                                {{ option.label }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"error\" *ngIf=\"form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)\" fxFlex=\"100%\">\n                <mat-error *ngIf=\"form.get(prop.key).errors.required\">\n                    El campo {{ prop.label }} es obligatorio.\n                </mat-error>\n            </div>\n        </div>\n    </form>\n\n    <button type=\"button\" mat-raised-button\n        (click)=\"send()\">{{ okText }}</button>\n    <button type=\"button\" mat-button\n        (click)=\"dialogRef.close(false)\">{{ cancelText }}</button>\n\n    `\n})\nexport class TWAPromptDialogComponent implements OnInit {\n\n    public form: FormGroup = new FormGroup({});\n    formSubmitEv: EventEmitter<any> = new EventEmitter();\n\n    public title: string;\n    public message: string;\n    public messageHtml: SafeHtml;\n    public fields: ITWAPromptField[];\n    public okText: string;\n    public cancelText: string;\n    public onSubmit: any;\n\n    constructor(public dialogRef: MatDialogRef<TWAPromptDialogComponent>) {\n    }\n\n    ngOnInit() {\n\n        const formGroup = {};\n        for (const i in this.fields) {\n            if (this.fields.hasOwnProperty(i)) {\n                formGroup[this.fields[i].key] = new FormControl(\n                    this.fields[i].value || '',\n                    this.mapValidators(this.fields[i].validation)\n                );\n                console.log(this.fields[i].autocomplete);\n                if (typeof this.fields[i].autocomplete !== 'undefined' && this.fields[i].autocomplete !== undefined) {\n                    console.log(this.fields[i].autocomplete);\n                    this.fields[i].autocomplete.filteredOptions = this.getFormGroupEvent(formGroup, i);\n                }\n            }\n        }\n\n        this.form = new FormGroup(formGroup);\n\n    }\n\n    getFormGroupEvent(formGroup, i) {\n        return formGroup[this.fields[i].key].valueChanges.pipe(\n            startWith(''),\n            map(filterValue => filterValue ? this._filterValues(filterValue, this.fields[i].autocomplete.options) :\n                this.fields[i].autocomplete.options.slice())\n        );\n    }\n\n    private _filterValues(value, options) {\n\n        const filteredValue = value.toLowerCase();\n\n        return options.filter(option => option.toLowerCase().indexOf(filteredValue) >= 0);\n\n    }\n\n    getFormSubmitEv() {\n            return this.formSubmitEv;\n    }\n\n    send() {\n            let i;\n            this.form.updateValueAndValidity();\n            if (this.form.status !== 'INVALID') {\n                    this.dialogRef.close(this.form.value);\n            } else {\n                    for (i in this.form.controls) {\n                    // console.log(this.form.controls[i]);\n                            if (this.form.controls.hasOwnProperty(i)) {\n                                    this.form.controls[i].markAsTouched({ onlySelf: true });\n                                    this.form.controls[i].updateValueAndValidity();\n                            }\n                    }\n            }\n    }\n\n    acClick(field: any, event: any) {\n        // console.log(event);\n        // console.log(field.autocomplete);\n        if (typeof field.autocomplete !== 'undefined') {\n            if (typeof field.autocomplete.forceSelect !== 'undefined' &&\n                field.autocomplete.forceSelect) {\n                field.autocomplete.selected = event.option.value;\n            }\n        }\n    }\n\n    acCheckBlur(field) {\n        // console.log(field.autocomplete.selected, this.form.controls[field.key].value);\n        if (typeof field.autocomplete !== 'undefined') {\n            if (typeof field.autocomplete.forceSelect !== 'undefined' &&\n                field.autocomplete.forceSelect) {\n                if (!field.autocomplete.selected ||\n                    field.autocomplete.selected !== this.form.controls[field.key].value) {\n                    this.form.controls[field.key].setValue(null);\n                    field.autocomplete.selected = '';\n                }\n            }\n        }\n    }\n\n    submitForm(form: any) {\n            this.formSubmitEv.emit(form);\n    }\n\n    private mapValidators(validators: any) {\n\n        const formValidators = [];\n\n        if (validators) {\n            for (const validation of Object.keys(validators)) {\n                if (validation === 'required') {\n                    formValidators.push(Validators.required);\n                } else if (validation === 'min') {\n                    formValidators.push(Validators.min(validators[validation]));\n                }\n            }\n        }\n\n        return formValidators;\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { TWAConfirmDialogComponent } from './confirm-dialog/twa-confirm-dialog.component';\nimport { TWAPromptDialogComponent } from './prompt-dialog/twa-prompt-dialog.component';\n// import { TWADialogsService } from './twa-dialogs.service';\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\nimport { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatDialogModule,\n    MatButtonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatAutocompleteModule,\n    NgxMaterialTimepickerModule.forRoot(),\n  ],\n  declarations: [\n    // TWADialogsModule,\n    TWAConfirmDialogComponent,\n    TWAPromptDialogComponent\n  ],\n  exports: [\n    // TWADialogsModule,\n    TWAConfirmDialogComponent,\n    TWAPromptDialogComponent\n  ],\n  entryComponents: [TWAConfirmDialogComponent, TWAPromptDialogComponent],\n  providers: [\n    TWADialogsModule,\n    TWAConfirmDialogComponent,\n    TWAPromptDialogComponent\n  ]\n})\n@Injectable()\nexport class TWADialogsModule {\n  constructor(\n      private dialog: MatDialog,\n      private _sanitizer: DomSanitizer\n    ) {}\n\n  public confirm(\n    title: string,\n    message: string,\n    okText?: string,\n    cancelText?: string\n  ): Observable<any> {\n    let dialogRef: MatDialogRef<TWAConfirmDialogComponent>;\n\n    dialogRef = this.dialog.open(TWAConfirmDialogComponent);\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.message = message;\n    dialogRef.componentInstance.messageHtml = this._sanitizer.bypassSecurityTrustHtml(message);\n    dialogRef.componentInstance.okText = okText || 'Aceptar';\n    dialogRef.componentInstance.cancelText = cancelText || '';\n\n    return dialogRef.afterClosed();\n  }\n\n  public prompt(\n    title: string,\n    message: string,\n    fields: any,\n    okText?: string,\n    cancelText?: string\n  ): Observable<any> {\n    let dialogRef: MatDialogRef<TWAPromptDialogComponent>;\n\n    dialogRef = this.dialog.open(TWAPromptDialogComponent);\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.message = message;\n    dialogRef.componentInstance.messageHtml = this._sanitizer.bypassSecurityTrustHtml(message);\n    dialogRef.componentInstance.fields = fields;\n    dialogRef.componentInstance.okText = okText || 'Aceptar';\n    dialogRef.componentInstance.cancelText = cancelText || 'Cancelar';\n\n    // onSubmit = dialogRef.componentInstance.getFormSubmitEv().subscribe(item => {\n    //     dialogRef.componentInstance.result = item;\n    // });\n\n    return dialogRef.afterClosed();\n  }\n}\n"],"names":[],"mappings":"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"}
