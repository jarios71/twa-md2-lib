{"version":3,"sources":["../projects/twa-md2-dialogs/src/lib/prompt-dialog/match-validator.directive.ts","../../projects/twa-md2-dialogs/src/lib/twa-dialogs.component.ts","../projects/twa-md2-dialogs/src/lib/confirm-dialog/twa-confirm-dialog.component.ts","../../../node_modules/tslib/tslib.es6.js","../projects/twa-md2-dialogs/src/lib/prompt-dialog/twa-prompt-dialog.component.ts","../../projects/twa-md2-dialogs/src/lib/twa-dialogs.module.ts"],"names":["MatchValidator","match","this","prototype","validate","c","v","value","e","root","get","Directive","args","selector","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","Attribute","TWADialogsComponent","message","ngOnInit","_this","setTimeout","Component","template","dialogRef","MatDialogRef","Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","done","TypeError","TWAPromptDialogComponent","form","FormGroup","formSubmitEv","EventEmitter","formData","FormData","isMultipart","updatingOnChanges","formGroup","fields","hasOwnProperty","type","key","FormControl","mapValidators","validation","autocomplete","undefined","filteredOptions","getFormGroupEvent","setOnChanges","onChanges","console","log","valueChanges","subscribe","res","newval","controls","result","data","patchValue","pipe","startWith","map","filterValue","_filterValues","options","slice","object","filteredValue","toLowerCase","filter","option","indexOf","getFormSubmitEv","send","updateValueAndValidity","status","set","getAll","close","markAsTouched","onlySelf","acClick","field","event","forceSelect","selected","acCheckBlur","setValue","submitForm","emit","drawCustomErrors","prop","error","validationMessages","validators","formValidators","push","Validators","required","control","min","max","_b","keys","_c","addFiles","formElement","document","getElementById","click","changeFiles","target","id","files","name","append","JSON","stringify","TWADialogsModule","dialog","_sanitizer","confirm","title","okText","cancelText","open","TWAConfirmDialogComponent","componentInstance","messageHtml","bypassSecurityTrustHtml","afterClosed","prompt","NgModule","imports","CommonModule","FlexLayoutModule","MatDialogModule","MatButtonModule","FormsModule","ReactiveFormsModule","MatInputModule","MatCheckboxModule","MatSelectModule","MatRadioModule","MatIconModule","MatDatepickerModule","MatNativeDateModule","MatAutocompleteModule","NgxMaterialTimepickerModule","declarations","exports","Injectable","providedIn","MatDialog","DomSanitizer"],"mappings":"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","sourcesContent":["import { Directive, forwardRef, Attribute } from '@angular/core';\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\n@Directive({\n    selector: '[tm-match][formControlName],[tm-match][formControl],[tm-match][ngModel]',\n    providers: [\n        { provide: NG_VALIDATORS, useExisting: forwardRef(() => MatchValidator), multi: true }\n    ]\n})\nexport class MatchValidator implements Validator {\n    constructor( @Attribute('tm-match') public match: string) {}\n\n    validate(c: AbstractControl): { [key: string]: any } {\n        // self value (e.g. retype password)\n        const v = c.value;\n\n        // control value (e.g. password)\n        const e = c.root.get(this.match);\n\n        // value not equal\n        if (e && v !== e.value) {\n            return {\n                match: false\n            };\n        }\n        return null;\n    }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'example-component',\n  template: '{{message}}'\n})\nexport class TWADialogsComponent implements OnInit {\n  message = 'Hello';\n\n  ngOnInit() {\n    setTimeout(() => {\n      this.message += ' World';\n    }, 1000);\n}\n\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { SafeHtml } from '@angular/platform-browser';\n\n@Component({\n    selector: 'twa-app-confirm-dialog',\n    // templateUrl: './twa-confirm-dialog.component.html',\n    // styleUrls: ['./twa-confirm-dialog.component.css'],\n    template: `\n    <h2>{{ title }}</h2>\n    <p [innerHtml]=\"messageHtml\"></p>\n\n    <button type=\"button\" mat-raised-button\n        (click)=\"dialogRef.close(true)\">{{ okText }}</button>\n    <button type=\"button\" mat-button *ngIf=\"cancelText > ''\"\n        (click)=\"dialogRef.close()\">{{ cancelText }}</button>\n    `\n})\n\nexport class TWAConfirmDialogComponent {\n\n    public title: string;\n    public message: string;\n    public messageHtml: SafeHtml;\n    public okText: string;\n    public cancelText: string;\n\n    constructor(public dialogRef: MatDialogRef<TWAConfirmDialogComponent>) {\n\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Component, EventEmitter, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { map, startWith } from 'rxjs/operators';\n\nimport { MatchValidator } from './match-validator.directive';\n\nexport interface ITWAPromptField {\n    key: string;\n    label: string;\n    type: string;\n    fxFlex?: string;\n    value?: string;\n    options?: any[];\n    autocomplete?: any;\n    rows?: any[];\n    validation?: any;\n    validationMessages?: any;\n}\n\n@Component({\n    selector: 'twa-app-prompt-dialog',\n    // templateUrl: './twa-prompt-dialog.component.html',\n    // styleUrls: ['./twa-prompt-dialog.component.css']\n    styles: ['.mat-error { display: block; margin: -15px 0 15px; }'],\n    template: `\n    <h2>{{ title }}</h2>\n    <p [innerHtml]=\"messageHtml\"></p>\n\n    <form novalidate (ngSubmit)=\"submitForm(form.value)\" [formGroup]=\"form\" fxLayout=\"row wrap\" fxLayoutGap=\"10px\">\n        <div *ngFor=\"let prop of fields\" fxFlex=\"{{prop.fxFlex ? prop.fxFlex : '100'}}\" fxLayout=\"column\">\n        <!-- <div *ngFor=\"let prop of fields\" fxFlex=\"{{prop.fxFlex ? ('calc(' + prop.fxFlex + ' - 10px)') : '100%'}}\" fxLayout=\"column\"> -->\n            <div [ngSwitch]=\"prop.type\" fxFlex=\"100%\">\n                <div *ngSwitchCase=\"'text'\">\n                    <mat-form-field *ngIf=\"!prop.autocomplete\" fxFlex>\n                        <input matInput placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\" [type]=\"prop.type\" fxFlex>\n                    </mat-form-field>\n                    <div *ngIf=\"prop.autocomplete\" fxFlex>\n                        <mat-form-field fxFlex>\n                            <input matInput placeholder=\"{{prop.label}}\"\n                                [formControlName]=\"prop.key\"\n                                [matAutocomplete]=\"auto\"\n                                (blur)=\"acCheckBlur(prop)\"\n                                [id]=\"prop.key\" [type]=\"prop.type\">\n                        </mat-form-field>\n                        <mat-autocomplete #auto=\"matAutocomplete\"\n                            (optionSelected)=\"acClick(prop, $event)\">\n                            <mat-option *ngFor=\"let option of prop.autocomplete.filteredOptions | async\"\n                                [value]=\"option\">\n                            {{ option }}\n                            </mat-option>\n                        </mat-autocomplete>\n                    </div>\n                </div>\n                <div *ngSwitchCase=\"'h4'\">\n                  <h4>{{prop.label}}</h4>\n                </div>\n                <div *ngSwitchCase=\"'password'\">\n                    <mat-form-field fxFlex>\n                        <input matInput type=\"password\" placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\" [type]=\"prop.type\" fxFlex>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'textarea'\">\n                    <mat-form-field fxFlex>\n                        <textarea matInput placeholder=\"{{prop.label}}\" rows=\"{{prop.rows||'3'}}\" autosize\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\" [type]=\"prop.type\"></textarea>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'number'\">\n                    <mat-form-field fxFlex>\n                        <input matInput placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\" [type]=\"prop.type\">\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'file'\">\n                    <mat-form-field fxFlex>\n                        <input type=\"file\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\"\n                            [type]=\"prop.type\"\n                            style=\"display: none\"\n                            (change)=\"changeFiles($event)\" />\n                        <input matInput placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key + 'Ctrl'\"\n                            [id]=\"prop.key + 'Ctrl'\" type=\"text\"\n                            (click)=\"addFiles(prop.key)\">\n                        <mat-icon matSuffix (click)=\"addFiles(prop.key)\">folder</mat-icon>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'checkbox'\">\n                    <mat-checkbox\n                        [formControlName]=\"prop.key\"\n                        [id]=\"prop.key\">\n                        {{prop.label}}\n                    </mat-checkbox>\n                </div>\n                <div *ngSwitchCase=\"'date'\">\n                    <mat-form-field fxFlex>\n                        <input matInput [matDatepicker]=picker placeholder=\"{{prop.label}}\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\">\n                        <mat-datepicker #picker></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase=\"'time'\">\n                    <mat-form-field fxFlex>\n                        <input matInput [ngxTimepicker]=\"tpicker\" placeholder=\"{{prop.label}}\"\n                            [format]=\"24\"\n                            [formControlName]=\"prop.key\"\n                            [id]=\"prop.key\">\n                        <ngx-material-timepicker #tpicker></ngx-material-timepicker>\n                    </mat-form-field>\n                </div>\n\n                <div *ngSwitchCase=\"'radio'\" fxLayout=\"column\">\n                    <div _ngcontent-c20=\"\" style=\"height: 20px;\">\n                        <label _ngcontent-c20=\"\" style=\"transform: translateY(-1.28125em) scale(0.75)\n                                perspective(100px)\n                                translateZ(0.001px);\n                                -ms-transform: translateY(-1.28125em)\n                                scale(0.75);width: 133.33333333%;margin: 20px 0 0 0;font-weight: 100;color: #666;\">\n                            {{prop.label}}\n                        </label>\n                    </div>\n                    <mat-radio-group [formControlName]=\"prop.key\" [name]=\"prop.key\" fxLayout=\"column\" style=\"margin-top: 14px;\">\n                        <mat-radio-button [value]=\"option.value\" *ngFor=\"let option of prop.options\">\n                            {{option.label}}\n                        </mat-radio-button>\n                    </mat-radio-group>\n                </div>\n\n                <div *ngSwitchCase=\"'select'\">\n                    <mat-form-field fxFlex>\n                        <mat-select [formControlName]=\"prop.key\" placeholder=\"{{prop.label}}\">\n                            <mat-option *ngFor=\"let option of prop.options\" [value]=\"option.value\">\n                                {{ option.label }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class=\"error\" *ngIf=\"form.get(prop.key).errors\" fxFlex=\"100%\">\n            </div>\n            <div class=\"error\" *ngIf=\"form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)\" fxFlex=\"100%\">\n                <mat-error *ngIf=\"form.get(prop.key).errors.required\">\n                    <div *ngIf=\"drawCustomErrors(prop, 'required')\">\n                        {{prop.validationMessages.required}}\n                    </div>\n                    <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.required\">\n                        The field {{ prop.label }} is required.\n                    </div>\n                </mat-error>\n                <mat-error *ngIf=\"form.get(prop.key).errors.match\">\n                    <div *ngIf=\"drawCustomErrors(prop, 'match')\">\n                        {{prop.validationMessages.match}}\n                    </div>\n                    <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.match\">\n                        The fields doesn't match.\n                    </div>\n                </mat-error>\n                <mat-error *ngIf=\"form.get(prop.key).errors.min\">\n                    <div *ngIf=\"drawCustomErrors(prop, 'min')\">\n                        {{prop.validationMessages.min}}\n                    </div>\n                    <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.min\">\n                        The minimal value is {{form.get(prop.key).errors.min.min}}.\n                    </div>\n                </mat-error>\n                <mat-error *ngIf=\"form.get(prop.key).errors.max\">\n                    <div *ngIf=\"drawCustomErrors(prop, 'max')\">\n                        {{prop.validationMessages.max}}\n                    </div>\n                    <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.max\">\n                        The max value is {{form.get(prop.key).errors.max.max}}.\n                    </div>\n                </mat-error>\n            </div>\n        </div>\n    </form>\n\n    <button type=\"button\" mat-raised-button\n        (click)=\"send()\">{{ okText }}</button>\n    <button type=\"button\" mat-button\n        (click)=\"dialogRef.close(false)\">{{ cancelText }}</button>\n\n    `\n})\nexport class TWAPromptDialogComponent implements OnInit {\n\n    public form: FormGroup = new FormGroup({});\n    formSubmitEv: EventEmitter<any> = new EventEmitter();\n    public formData: FormData = new FormData();\n    public isMultipart = false;\n\n    public title: string;\n    public message: string;\n    public messageHtml: SafeHtml;\n    public fields: ITWAPromptField[];\n    public okText: string;\n    public cancelText: string;\n    public onSubmit: any;\n    public onChanges: any;\n    public updatingOnChanges = false;\n\n    constructor(public dialogRef: MatDialogRef<TWAPromptDialogComponent>) {\n    }\n\n    ngOnInit() {\n\n        const formGroup = {};\n        for (const i in this.fields) {\n            if (this.fields.hasOwnProperty(i)) {\n                if (this.fields[i].type !== 'file') {\n                    formGroup[this.fields[i].key] = new FormControl(\n                        this.fields[i].value || '',\n                        this.mapValidators(this.fields[i].validation, this.fields[i].key)\n                    );\n                } else {\n                    formGroup[this.fields[i].key] = new FormControl(\n                        '',\n                        this.mapValidators(this.fields[i].validation, this.fields[i].key)\n                    );\n                }\n                if (typeof this.fields[i].autocomplete !== 'undefined' && this.fields[i].autocomplete !== undefined) {\n                    this.fields[i].autocomplete.filteredOptions = this.getFormGroupEvent(formGroup, i);\n                }\n                if (this.fields[i].type === 'file') {\n                    this.isMultipart = true;\n                    formGroup[this.fields[i].key + 'Ctrl'] = new FormControl(\n                        this.fields[i].value\n                    );\n                }\n            }\n        }\n\n        this.form = new FormGroup(formGroup);\n        this.setOnChanges();\n    }\n\n    setOnChanges() {\n      if (this.onChanges) {\n        console.log('🚀 ~ file: twa-prompt-dialog.component.ts ~ line 246 ~ TWAPromptDialogComponent ~ ngOnInit ~ this.onChanges', this.onChanges);\n        this.form.valueChanges.subscribe(res => {\n          if (this.updatingOnChanges) {\n            return;\n          }\n          console.log('🚀 ~ file: twa-prompt-dialog.component.ts ~ line 248 ~ TWAPromptDialogComponent ~ ngOnInit ~ res', res);\n          // const newval = this.onChanges(res);ES061610000302\n          this.updatingOnChanges = true;\n          this.onChanges(res).subscribe(newval => {\n            console.log('🚀 ~ file: twa-prompt-dialog.component.ts ~ line 255 ~ TWAPromptDialogComponent ~ this.onChanges ~ newval', newval);\n            console.log('🚀 ~ file: twa-prompt-dialog.component.ts ~ line 261 ~ TWAPromptDialogComponent ~ this.onChanges ~ this.form.controls', this.form.controls);\n            if (newval.result && newval.data) {\n              this.form.patchValue(newval.data);\n              // for (let prop in newval.data) {\n              //   if (newval.data.hasOwnProperty(prop) && this.form.controls.hasOwnProperty(prop)) {\n              //     this.form.controls[prop].setValue(newval.data[prop]);\n              //   }\n              // }\n              this.updatingOnChanges = false;\n            }\n          });\n        });\n      } else {\n        console.log('🚀 ~ file: twa-prompt-dialog.component.ts ~ line 246 ~ TWAPromptDialogComponent ~ ngOnInit ~ this.onChanges', ' NO CHANGES');\n      }\n\n    }\n\n    getFormGroupEvent(formGroup, i) {\n        return formGroup[this.fields[i].key].valueChanges.pipe(\n            startWith(''),\n            map(filterValue => filterValue ? this._filterValues(filterValue, this.fields[i].autocomplete.options) :\n                this.fields[i].autocomplete.options.slice())\n        );\n    }\n\n    log(object: any) {\n        console.log(object);\n    }\n\n    private _filterValues(value, options) {\n\n        const filteredValue = value.toLowerCase();\n\n        return options.filter(option => option.toLowerCase().indexOf(filteredValue) >= 0);\n\n    }\n\n    getFormSubmitEv() {\n            return this.formSubmitEv;\n    }\n\n    send() {\n            // let i;\n            this.form.updateValueAndValidity();\n            if (this.form.status !== 'INVALID') {\n                console.log(this.form.controls);\n                console.log(this.form.value);\n                if (this.isMultipart) {\n                    const fields = this.fields;\n                    for (const i in fields) {\n                        if (fields[i].type !== 'file') {\n                            this.formData.set(fields[i].key, this.form.value[fields[i].key]);\n                            console.log(i, this.formData.getAll(fields[i].key));\n                        } else {\n                            console.log('file', i, this.formData.getAll(fields[i].key));\n                        }\n                    }\n                    this.dialogRef.close(this.formData);\n                } else {\n                    this.dialogRef.close(this.form.value);\n                }\n            } else {\n                    for (const i in this.form.controls) {\n                    // console.log(this.form.controls[i]);\n                            if (this.form.controls.hasOwnProperty(i)) {\n                                    this.form.controls[i].markAsTouched({ onlySelf: true });\n                                    this.form.controls[i].updateValueAndValidity();\n                            }\n                    }\n            }\n    }\n\n    acClick(field: any, event: any) {\n        // console.log(event);\n        // console.log(field.autocomplete);\n        if (typeof field.autocomplete !== 'undefined') {\n            if (typeof field.autocomplete.forceSelect !== 'undefined' &&\n                field.autocomplete.forceSelect) {\n                field.autocomplete.selected = event.option.value;\n            }\n        }\n    }\n\n    acCheckBlur(field) {\n        // console.log(field.autocomplete.selected, this.form.controls[field.key].value);\n        if (typeof field.autocomplete !== 'undefined') {\n            if (typeof field.autocomplete.forceSelect !== 'undefined' &&\n                field.autocomplete.forceSelect) {\n                if (!field.autocomplete.selected ||\n                    field.autocomplete.selected !== this.form.controls[field.key].value) {\n                    this.form.controls[field.key].setValue(null);\n                    field.autocomplete.selected = '';\n                }\n            }\n        }\n    }\n\n    submitForm(form: any) {\n            this.formSubmitEv.emit(form);\n    }\n\n    drawCustomErrors(prop, error) {\n        let ret = false;\n        if (typeof prop.validationMessages !== 'undefined') {\n            if (typeof prop.validationMessages[error] !== 'undefined') {\n                ret = prop.validationMessages[error] > '';\n            } else {\n                ret = false;\n            }\n        } else {\n            ret = false;\n        }\n        return ret;\n    }\n\n    private mapValidators(validators: any, field) {\n\n        const formValidators = [];\n\n        if (validators) {\n            for (const validation of Object.keys(validators)) {\n                if (validation === 'required') {\n                    formValidators.push(Validators.required);\n                } else if (validation === 'match') {\n                    formValidators.push(() => {\n                        let ret: any | boolean = false;\n                        const control = this.form.get(validators[validation]);\n                        if (!this.form.get(field)) {\n                            ret = null;\n                        }\n                        ret = !(this.form.get(field) && this.form.get(field).value === control.value);\n                        if (!ret) {\n                            ret = null;\n                        } else {\n                            ret = {\n                                match: true\n                            };\n                        }\n                        return ret;\n                    });\n                } else if (validation === 'min') {\n                    formValidators.push(Validators.min(validators[validation]));\n                } else if (validation === 'max') {\n                    formValidators.push(Validators.max(validators[validation]));\n                }\n            }\n        }\n\n        return formValidators;\n    }\n\n    addFiles(formElement): void {\n\n        console.log(formElement, this.form.get(formElement));\n        const elem = document.getElementById(formElement) as HTMLInputElement;\n        elem.click();\n        // this.form.get(formElement).nativeElement.click();\n\n    }\n\n    changeFiles(formElement): void {\n\n        this.form.get(formElement.target.id + 'Ctrl').setValue(formElement.target.files[0].name);\n\n        // console.log(formElement);\n        // const formData = new FormData();\n        this.formData.append(formElement.target.id, formElement.target.files[0]);\n        console.log(JSON.stringify(this.formData));\n        console.log(this.formData);\n        // this.form.get(formElement.target.id).setValue(JSON.stringify(formData));\n\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\n\nimport { MatchValidator } from './prompt-dialog/match-validator.directive';\nimport { TWADialogsComponent } from './twa-dialogs.component';\nimport { TWAConfirmDialogComponent } from './confirm-dialog/twa-confirm-dialog.component';\nimport { TWAPromptDialogComponent } from './prompt-dialog/twa-prompt-dialog.component';\n// import { TWADialogsService } from './twa-dialogs.service';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatDialogModule,\n    MatButtonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatIconModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatAutocompleteModule,\n    NgxMaterialTimepickerModule,\n  ],\n  declarations: [\n    // TWADialogsModule,\n    TWADialogsComponent,\n    TWAConfirmDialogComponent,\n    TWAPromptDialogComponent,\n    MatchValidator,\n  ],\n  exports: [\n    // TWADialogsModule,\n    TWAConfirmDialogComponent,\n    TWAPromptDialogComponent\n  ],\n  // entryComponents: [TWAConfirmDialogComponent, TWAPromptDialogComponent],\n  providers: [\n    TWADialogsModule,\n    TWAConfirmDialogComponent,\n    TWAPromptDialogComponent\n  ]\n})\n@Injectable({\n    providedIn: 'root'\n})\nexport class TWADialogsModule {\n  constructor(\n      private dialog: MatDialog,\n      private _sanitizer: DomSanitizer\n    ) {}\n\n  public confirm(\n    title: string,\n    message: string,\n    okText?: string,\n    cancelText?: string\n  ): Observable<any> {\n    let dialogRef: MatDialogRef<TWAConfirmDialogComponent>;\n\n    dialogRef = this.dialog.open(TWAConfirmDialogComponent);\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.message = message;\n    dialogRef.componentInstance.messageHtml = this._sanitizer.bypassSecurityTrustHtml(message);\n    dialogRef.componentInstance.okText = okText || 'Aceptar';\n    dialogRef.componentInstance.cancelText = cancelText || '';\n\n    return dialogRef.afterClosed();\n  }\n\n  public prompt(\n    title: string,\n    message: string,\n    fields: any,\n    okText?: string,\n    cancelText?: string,\n    onChanges?: any,\n  ): Observable<any> {\n    let dialogRef: MatDialogRef<TWAPromptDialogComponent>;\n\n    dialogRef = this.dialog.open(TWAPromptDialogComponent);\n\n    dialogRef.componentInstance.title = title;\n    dialogRef.componentInstance.message = message;\n    dialogRef.componentInstance.messageHtml = this._sanitizer.bypassSecurityTrustHtml(message);\n    dialogRef.componentInstance.fields = fields;\n    dialogRef.componentInstance.okText = okText || 'Aceptar';\n    dialogRef.componentInstance.cancelText = cancelText || 'Cancelar';\n    dialogRef.componentInstance.onChanges = onChanges || false;\n\n    if (onChanges) {\n      console.log('🚀 ~ file: twa-dialogs.module.ts ~ line 114 ~ TWADialogsModule ~ onChanges', onChanges);\n      dialogRef.componentInstance.setOnChanges();\n    }\n    // onSubmit = dialogRef.componentInstance.getFormSubmitEv().subscribe(item => {\n    //     dialogRef.componentInstance.result = item;\n    // });\n\n    return dialogRef.afterClosed();\n  }\n}\n"]}