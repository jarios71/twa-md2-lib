!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/forms"),require("@angular/material/input"),require("@angular/material/checkbox"),require("@angular/material/select"),require("@angular/material/radio"),require("@angular/material/icon"),require("@angular/material/datepicker"),require("@angular/material/core"),require("@angular/material/autocomplete"),require("@angular/material/dialog"),require("rxjs/operators"),require("@angular/material/button"),require("ngx-material-timepicker"),require("@angular/platform-browser")):"function"==typeof define&&define.amd?define("twa-md2-dialogs",["exports","@angular/core","@angular/common","@angular/flex-layout","@angular/forms","@angular/material/input","@angular/material/checkbox","@angular/material/select","@angular/material/radio","@angular/material/icon","@angular/material/datepicker","@angular/material/core","@angular/material/autocomplete","@angular/material/dialog","rxjs/operators","@angular/material/button","ngx-material-timepicker","@angular/platform-browser"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["twa-md2-dialogs"]={},e.ng.core,e.ng.common,e.ng.flexLayout,e.ng.forms,e.ng.material.input,e.ng.material.checkbox,e.ng.material.select,e.ng.material.radio,e.ng.material.icon,e.ng.material.datepicker,e.ng.material.core,e.ng.material.autocomplete,e.ng.material.dialog,e.rxjs.operators,e.ng.material.button,e.ngxMaterialTimepicker,e.ng.platformBrowser)}(this,(function(e,t,o,r,n,a,i,l,p,m,s,c,u,f,d,g,y,h){"use strict";var v=function(){function e(e){this.match=e}return e.prototype.validate=function(e){var t=e.value,o=e.root.get(this.match);return o&&t!==o.value?{match:!1}:null},e}();v.decorators=[{type:t.Directive,args:[{selector:"[tm-match][formControlName],[tm-match][formControl],[tm-match][ngModel]",providers:[{provide:n.NG_VALIDATORS,useExisting:t.forwardRef((function(){return v})),multi:!0}]}]}],v.ctorParameters=function(){return[{type:String,decorators:[{type:t.Attribute,args:["tm-match"]}]}]};var x=function(){function e(){this.message="Hello"}return e.prototype.ngOnInit=function(){var e=this;setTimeout((function(){e.message+=" World"}),1e3)},e}();x.decorators=[{type:t.Component,args:[{selector:"example-component",template:"{{message}}"}]}];var k=function(e){this.dialogRef=e};k.decorators=[{type:t.Component,args:[{selector:"twa-app-confirm-dialog",template:'\n    <h2>{{ title }}</h2>\n    <p [innerHtml]="messageHtml"></p>\n\n    <button type="button" mat-raised-button\n        (click)="dialogRef.close(true)">{{ okText }}</button>\n    <button type="button" mat-button *ngIf="cancelText > \'\'"\n        (click)="dialogRef.close()">{{ cancelText }}</button>\n    '}]}],k.ctorParameters=function(){return[{type:f.MatDialogRef}]};Object.create;function b(e){var t="function"==typeof Symbol&&Symbol.iterator,o=t&&e[t],r=0;if(o)return o.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}Object.create;var C=function(){function e(e){this.dialogRef=e,this.form=new n.FormGroup({}),this.formSubmitEv=new t.EventEmitter,this.formData=new FormData,this.isMultipart=!1}return e.prototype.ngOnInit=function(){var e={};for(var t in this.fields)this.fields.hasOwnProperty(t)&&("file"!==this.fields[t].type?e[this.fields[t].key]=new n.FormControl(this.fields[t].value||"",this.mapValidators(this.fields[t].validation,this.fields[t].key)):e[this.fields[t].key]=new n.FormControl("",this.mapValidators(this.fields[t].validation,this.fields[t].key)),void 0!==this.fields[t].autocomplete&&void 0!==this.fields[t].autocomplete&&(this.fields[t].autocomplete.filteredOptions=this.getFormGroupEvent(e,t)),"file"===this.fields[t].type&&(this.isMultipart=!0,e[this.fields[t].key+"Ctrl"]=new n.FormControl(this.fields[t].value)));this.form=new n.FormGroup(e)},e.prototype.getFormGroupEvent=function(e,t){var o=this;return e[this.fields[t].key].valueChanges.pipe(d.startWith(""),d.map((function(e){return e?o._filterValues(e,o.fields[t].autocomplete.options):o.fields[t].autocomplete.options.slice()})))},e.prototype.log=function(e){console.log(e)},e.prototype._filterValues=function(e,t){var o=e.toLowerCase();return t.filter((function(e){return e.toLowerCase().indexOf(o)>=0}))},e.prototype.getFormSubmitEv=function(){return this.formSubmitEv},e.prototype.send=function(){if(this.form.updateValueAndValidity(),"INVALID"!==this.form.status)if(console.log(this.form.controls),console.log(this.form.value),this.isMultipart){var e=this.fields;for(var t in e)"file"!==e[t].type?(this.formData.set(e[t].key,this.form.value[e[t].key]),console.log(t,this.formData.getAll(e[t].key))):console.log("file",t,this.formData.getAll(e[t].key));this.dialogRef.close(this.formData)}else this.dialogRef.close(this.form.value);else for(var t in this.form.controls)this.form.controls.hasOwnProperty(t)&&(this.form.controls[t].markAsTouched({onlySelf:!0}),this.form.controls[t].updateValueAndValidity())},e.prototype.acClick=function(e,t){void 0!==e.autocomplete&&void 0!==e.autocomplete.forceSelect&&e.autocomplete.forceSelect&&(e.autocomplete.selected=t.option.value)},e.prototype.acCheckBlur=function(e){void 0!==e.autocomplete&&void 0!==e.autocomplete.forceSelect&&e.autocomplete.forceSelect&&(e.autocomplete.selected&&e.autocomplete.selected===this.form.controls[e.key].value||(this.form.controls[e.key].setValue(null),e.autocomplete.selected=""))},e.prototype.submitForm=function(e){this.formSubmitEv.emit(e)},e.prototype.drawCustomErrors=function(e,t){return void 0!==e.validationMessages&&(void 0!==e.validationMessages[t]&&e.validationMessages[t]>"")},e.prototype.mapValidators=function(e,t){var o,r,a=this,i=[];if(e){var l=function(o){"required"===o?i.push(n.Validators.required):"match"===o?i.push((function(){var r=a.form.get(e[o]);return a.form.get(t)||null,!(a.form.get(t)&&a.form.get(t).value===r.value)?{match:!0}:null})):"min"===o?i.push(n.Validators.min(e[o])):"max"===o&&i.push(n.Validators.max(e[o]))};try{for(var p=b(Object.keys(e)),m=p.next();!m.done;m=p.next()){l(m.value)}}catch(e){o={error:e}}finally{try{m&&!m.done&&(r=p.return)&&r.call(p)}finally{if(o)throw o.error}}}return i},e.prototype.addFiles=function(e){console.log(e,this.form.get(e)),document.getElementById(e).click()},e.prototype.changeFiles=function(e){this.form.get(e.target.id+"Ctrl").setValue(e.target.files[0].name),this.formData.append(e.target.id,e.target.files[0]),console.log(JSON.stringify(this.formData)),console.log(this.formData)},e}();C.decorators=[{type:t.Component,args:[{selector:"twa-app-prompt-dialog",template:'\n    <h2>{{ title }}</h2>\n    <p [innerHtml]="messageHtml"></p>\n\n    <form novalidate (ngSubmit)="submitForm(form.value)" [formGroup]="form" fxLayout="row wrap" fxLayoutGap="10px">\n        <div *ngFor="let prop of fields" fxFlex="{{prop.fxFlex ? prop.fxFlex : \'100\'}}" fxLayout="column">\n        \x3c!-- <div *ngFor="let prop of fields" fxFlex="{{prop.fxFlex ? (\'calc(\' + prop.fxFlex + \' - 10px)\') : \'100%\'}}" fxLayout="column"> --\x3e\n            <div [ngSwitch]="prop.type" fxFlex="100%">\n                <div *ngSwitchCase="\'text\'">\n                    <mat-form-field *ngIf="!prop.autocomplete" fxFlex>\n                        <input matInput placeholder="{{prop.label}}"\n                            [formControlName]="prop.key"\n                            [id]="prop.key" [type]="prop.type" fxFlex>\n                    </mat-form-field>\n                    <div *ngIf="prop.autocomplete" fxFlex>\n                        <mat-form-field fxFlex>\n                            <input matInput placeholder="{{prop.label}}"\n                                [formControlName]="prop.key"\n                                [matAutocomplete]="auto"\n                                (blur)="acCheckBlur(prop)"\n                                [id]="prop.key" [type]="prop.type">\n                        </mat-form-field>\n                        <mat-autocomplete #auto="matAutocomplete"\n                            (optionSelected)="acClick(prop, $event)">\n                            <mat-option *ngFor="let option of prop.autocomplete.filteredOptions | async"\n                                [value]="option">\n                            {{ option }}\n                            </mat-option>\n                        </mat-autocomplete>\n                    </div>\n                </div>\n                <div *ngSwitchCase="\'password\'">\n                    <mat-form-field fxFlex>\n                        <input matInput type="password" placeholder="{{prop.label}}"\n                            [formControlName]="prop.key"\n                            [id]="prop.key" [type]="prop.type" fxFlex>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'textarea\'">\n                    <mat-form-field fxFlex>\n                        <textarea matInput placeholder="{{prop.label}}" rows="{{prop.rows||\'3\'}}" autosize\n                            [formControlName]="prop.key"\n                            [id]="prop.key" [type]="prop.type"></textarea>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'number\'">\n                    <mat-form-field fxFlex>\n                        <input matInput placeholder="{{prop.label}}"\n                            [formControlName]="prop.key"\n                            [id]="prop.key" [type]="prop.type">\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'file\'">\n                    <mat-form-field fxFlex>\n                        <input type="file"\n                            [formControlName]="prop.key"\n                            [id]="prop.key"\n                            [type]="prop.type"\n                            style="display: none"\n                            (change)="changeFiles($event)" />\n                        <input matInput placeholder="{{prop.label}}"\n                            [formControlName]="prop.key + \'Ctrl\'"\n                            [id]="prop.key + \'Ctrl\'" type="text"\n                            (click)="addFiles(prop.key)">\n                        <mat-icon matSuffix (click)="addFiles(prop.key)">folder</mat-icon>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'checkbox\'">\n                    <mat-checkbox\n                        [formControlName]="prop.key"\n                        [id]="prop.key">\n                        {{prop.label}}\n                    </mat-checkbox>\n                </div>\n                <div *ngSwitchCase="\'date\'">\n                    <mat-form-field fxFlex>\n                        <input matInput [matDatepicker]=picker placeholder="{{prop.label}}"\n                            [formControlName]="prop.key"\n                            [id]="prop.key">\n                        <mat-datepicker #picker></mat-datepicker>\n                        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\n                    </mat-form-field>\n                </div>\n                <div *ngSwitchCase="\'time\'">\n                    <mat-form-field fxFlex>\n                        <input matInput [ngxTimepicker]="tpicker" placeholder="{{prop.label}}"\n                            [format]="24"\n                            [formControlName]="prop.key"\n                            [id]="prop.key">\n                        <ngx-material-timepicker #tpicker></ngx-material-timepicker>\n                    </mat-form-field>\n                </div>\n\n                <div *ngSwitchCase="\'radio\'" fxLayout="column">\n                    <div _ngcontent-c20="" style="height: 20px;">\n                        <label _ngcontent-c20="" style="transform: translateY(-1.28125em) scale(0.75)\n                                perspective(100px)\n                                translateZ(0.001px);\n                                -ms-transform: translateY(-1.28125em)\n                                scale(0.75);width: 133.33333333%;margin: 20px 0 0 0;font-weight: 100;color: #666;">\n                            {{prop.label}}\n                        </label>\n                    </div>\n                    <mat-radio-group [formControlName]="prop.key" [name]="prop.key" fxLayout="column" style="margin-top: 14px;">\n                        <mat-radio-button [value]="option.value" *ngFor="let option of prop.options">\n                            {{option.label}}\n                        </mat-radio-button>\n                    </mat-radio-group>\n                </div>\n\n                <div *ngSwitchCase="\'select\'">\n                    <mat-form-field fxFlex>\n                        <mat-select [formControlName]="prop.key" placeholder="{{prop.label}}">\n                            <mat-option *ngFor="let option of prop.options" [value]="option.value">\n                                {{ option.label }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n            </div>\n            <div class="error" *ngIf="form.get(prop.key).errors" fxFlex="100%">\n            </div>\n            <div class="error" *ngIf="form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)" fxFlex="100%">\n                <mat-error *ngIf="form.get(prop.key).errors.required">\n                    <div *ngIf="drawCustomErrors(prop, \'required\')">\n                        {{prop.validationMessages.required}}\n                    </div>\n                    <div *ngIf="!prop.validationMessages || !prop.validationMessages.required">\n                        The field {{ prop.label }} is required.\n                    </div>\n                </mat-error>\n                <mat-error *ngIf="form.get(prop.key).errors.match">\n                    <div *ngIf="drawCustomErrors(prop, \'match\')">\n                        {{prop.validationMessages.match}}\n                    </div>\n                    <div *ngIf="!prop.validationMessages || !prop.validationMessages.match">\n                        The fields doesn\'t match.\n                    </div>\n                </mat-error>\n                <mat-error *ngIf="form.get(prop.key).errors.min">\n                    <div *ngIf="drawCustomErrors(prop, \'min\')">\n                        {{prop.validationMessages.min}}\n                    </div>\n                    <div *ngIf="!prop.validationMessages || !prop.validationMessages.min">\n                        The minimal value is {{form.get(prop.key).errors.min.min}}.\n                    </div>\n                </mat-error>\n                <mat-error *ngIf="form.get(prop.key).errors.max">\n                    <div *ngIf="drawCustomErrors(prop, \'max\')">\n                        {{prop.validationMessages.max}}\n                    </div>\n                    <div *ngIf="!prop.validationMessages || !prop.validationMessages.max">\n                        The max value is {{form.get(prop.key).errors.max.max}}.\n                    </div>\n                </mat-error>\n            </div>\n        </div>\n    </form>\n\n    <button type="button" mat-raised-button\n        (click)="send()">{{ okText }}</button>\n    <button type="button" mat-button\n        (click)="dialogRef.close(false)">{{ cancelText }}</button>\n\n    ',styles:[".mat-error { display: block; margin: -15px 0 15px; }"]}]}],C.ctorParameters=function(){return[{type:f.MatDialogRef}]};var M=function(){function e(e,t){this.dialog=e,this._sanitizer=t}return e.prototype.confirm=function(e,t,o,r){var n;return(n=this.dialog.open(k)).componentInstance.title=e,n.componentInstance.message=t,n.componentInstance.messageHtml=this._sanitizer.bypassSecurityTrustHtml(t),n.componentInstance.okText=o||"Aceptar",n.componentInstance.cancelText=r||"",n.afterClosed()},e.prototype.prompt=function(e,t,o,r,n){var a;return(a=this.dialog.open(C)).componentInstance.title=e,a.componentInstance.message=t,a.componentInstance.messageHtml=this._sanitizer.bypassSecurityTrustHtml(t),a.componentInstance.fields=o,a.componentInstance.okText=r||"Aceptar",a.componentInstance.cancelText=n||"Cancelar",a.afterClosed()},e}();M.ɵprov=t.ɵɵdefineInjectable({factory:function(){return new M(t.ɵɵinject(f.MatDialog),t.ɵɵinject(h.DomSanitizer))},token:M,providedIn:"root"}),M.decorators=[{type:t.NgModule,args:[{imports:[o.CommonModule,r.FlexLayoutModule,f.MatDialogModule,g.MatButtonModule,n.FormsModule,n.ReactiveFormsModule,a.MatInputModule,i.MatCheckboxModule,l.MatSelectModule,p.MatRadioModule,m.MatIconModule,s.MatDatepickerModule,c.MatNativeDateModule,u.MatAutocompleteModule,y.NgxMaterialTimepickerModule],declarations:[x,k,C,v],exports:[k,C],providers:[M,k,C]}]},{type:t.Injectable,args:[{providedIn:"root"}]}],M.ctorParameters=function(){return[{type:f.MatDialog},{type:h.DomSanitizer}]},e.TWAConfirmDialogComponent=k,e.TWADialogsModule=M,e.TWAPromptDialogComponent=C,e.ɵa=x,e.ɵb=v,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=twa-md2-dialogs.umd.min.js.map