!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/forms"),require("rxjs/operators"),require("@angular/common"),require("@angular/flex-layout"),require("@angular/material/input"),require("@angular/material/checkbox"),require("@angular/material/select"),require("@angular/material/radio"),require("@angular/material/icon"),require("@angular/material/datepicker"),require("@angular/material"),require("@angular/material/autocomplete"),require("ngx-material-timepicker")):"function"==typeof define&&define.amd?define("twa-md2-dynforms",["exports","@angular/core","@angular/forms","rxjs/operators","@angular/common","@angular/flex-layout","@angular/material/input","@angular/material/checkbox","@angular/material/select","@angular/material/radio","@angular/material/icon","@angular/material/datepicker","@angular/material","@angular/material/autocomplete","ngx-material-timepicker"],t):t((e=e||self)["twa-md2-dynforms"]={},e.ng.core,e.ng.forms,e.rxjs.operators,e.ng.common,e.ng["flex-layout"],e.ng.material.input,e.ng.material.checkbox,e.ng.material.select,e.ng.material.radio,e.ng.material.icon,e.ng.material.datepicker,e.ng.material,e.ng.material.autocomplete,e.ngxMaterialTimepicker)}(this,function(e,t,o,r,n,a,i,l,p,m,s,f,d,u,c){"use strict";function g(e){var t="function"==typeof Symbol&&e[Symbol.iterator],o=0;return t?t.call(e):{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}}}var y=function(){function e(){}return e.decorators=[{type:t.Injectable,args:[{providedIn:"root"}]}],e.ctorParameters=function(){return[]},e.ngInjectableDef=t.ɵɵdefineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e}();var v=function(){function e(){this.form=new o.FormGroup({}),this.formSubmitEv=new t.EventEmitter,this.formData=new FormData,this.isMultipart=!1,this.submit=this.formSubmitEv}return e.prototype.ngOnInit=function(){},e.prototype.ngOnChanges=function(){this.createForm()},e.prototype.createForm=function(){var e={};for(var t in this.fields)this.fields.hasOwnProperty(t)&&("file"!==this.fields[t].type?e[this.fields[t].key]=new o.FormControl(this.fields[t].value||"",this.mapValidators(this.fields[t].validation,this.fields[t].key)):e[this.fields[t].key]=new o.FormControl("",this.mapValidators(this.fields[t].validation,this.fields[t].key)),void 0!==this.fields[t].autocomplete&&void 0!==this.fields[t].autocomplete&&(this.fields[t].autocomplete.filteredOptions=this.getFormGroupEvent(e,t)),"file"===this.fields[t].type&&(this.isMultipart=!0,e[this.fields[t].key+"Ctrl"]=new o.FormControl(this.fields[t].value)));this.form=new o.FormGroup(e)},e.prototype.getFormGroupEvent=function(e,t){var o=this;return e[this.fields[t].key].valueChanges.pipe(r.startWith(""),r.map(function(e){return e?o._filterValues(e,o.fields[t].autocomplete.options):o.fields[t].autocomplete.options.slice()}))},e.prototype.log=function(e){console.log(e)},e.prototype._filterValues=function(e,t){var o=e.toLowerCase();return t.filter(function(e){return e.toLowerCase().indexOf(o)>=0})},e.prototype.getFormSubmitEv=function(){return this.formSubmitEv},e.prototype.send=function(){if(this.form.updateValueAndValidity(),"INVALID"!==this.form.status){if(console.log(this.form.controls),console.log(this.form.value),this.isMultipart){var e=this.fields;for(var t in e)"file"!==e[t].type?(this.formData.set(e[t].key,this.form.value[e[t].key]),console.log(t,this.formData.getAll(e[t].key))):console.log("file",t,this.formData.getAll(e[t].key))}}else for(var t in this.form.controls)this.form.controls.hasOwnProperty(t)&&(this.form.controls[t].markAsTouched({onlySelf:!0}),this.form.controls[t].updateValueAndValidity())},e.prototype.acClick=function(e,t){void 0!==e.autocomplete&&void 0!==e.autocomplete.forceSelect&&e.autocomplete.forceSelect&&(e.autocomplete.selected=t.option.value)},e.prototype.acCheckBlur=function(e){void 0!==e.autocomplete&&void 0!==e.autocomplete.forceSelect&&e.autocomplete.forceSelect&&(e.autocomplete.selected&&e.autocomplete.selected===this.form.controls[e.key].value||(this.form.controls[e.key].setValue(null),e.autocomplete.selected=""))},e.prototype.submitForm=function(e){this.formSubmitEv.emit(e)},e.prototype.drawCustomErrors=function(e,t){return void 0!==e.validationMessages&&(void 0!==e.validationMessages[t]&&e.validationMessages[t]>"")},e.prototype.mapValidators=function(e,t){var r,n,a=this,i=[];if(e){var l=function(r){"required"===r?i.push(o.Validators.required):"match"===r?i.push(function(){var o=a.form.get(e[r]);return a.form.get(t)||null,!(a.form.get(t)&&a.form.get(t).value===o.value)?{match:!0}:null}):"min"===r?i.push(o.Validators.min(e[r])):"max"===r&&i.push(o.Validators.max(e[r]))};try{for(var p=g(Object.keys(e)),m=p.next();!m.done;m=p.next()){l(m.value)}}catch(e){r={error:e}}finally{try{m&&!m.done&&(n=p.return)&&n.call(p)}finally{if(r)throw r.error}}}return i},e.prototype.addFiles=function(e){console.log(e,this.form.get(e)),document.getElementById(e).click()},e.prototype.changeFiles=function(e){this.form.get(e.target.id+"Ctrl").setValue(e.target.files[0].name),this.formData.append(e.target.id,e.target.files[0]),console.log(JSON.stringify(this.formData)),console.log(this.formData)},e.decorators=[{type:t.Component,args:[{selector:"twa-md2-dynforms",template:'\n    <h2 *ngIf="title && title > \'\'">{{ title }}</h2>\n    <p *ngIf="message && message > \'\'" [innerHtml]="messageHtml"></p>\n\n    <form novalidate (ngSubmit)="submitForm(form.value)" [formGroup]="form" fxLayout="row wrap" fxLayoutGap="10px">\n      <div *ngFor="let prop of fields" fxFlex="{{(prop.fxFlex != \'false\') ? (\'calc(\' + prop.fxFlex + \' - 10px)\') : ((prop.fxFlex == \'false\') ? \'0 0 0\' : \'100%\')}}" fxLayout="column">\n        <div [ngSwitch]="prop.type" fxFlex="100%">\n          <div *ngSwitchCase="\'text\'">\n            <mat-form-field class="dynform-field-{{prop.key}}" *ngIf="!prop.autocomplete" fxFlex>\n              <input matInput placeholder="{{prop.label}}"\n                [formControlName]="prop.key"\n                [id]="prop.key" [type]="prop.type" fxFlex>\n            </mat-form-field>\n            <div *ngIf="prop.autocomplete" fxFlex>\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <input matInput placeholder="{{prop.label}}"\n                  [formControlName]="prop.key"\n                  [matAutocomplete]="auto"\n                  (blur)="acCheckBlur(prop)"\n                  [id]="prop.key" [type]="prop.type">\n              </mat-form-field>\n              <mat-autocomplete #auto="matAutocomplete"\n                (optionSelected)="acClick(prop, $event)">\n                <mat-option *ngFor="let option of prop.autocomplete.filteredOptions | async"\n                  [value]="option">\n                {{ option }}\n                </mat-option>\n              </mat-autocomplete>\n            </div>\n          </div>\n            <div *ngSwitchCase="\'password\'">\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <input matInput type="password" placeholder="{{prop.label}}"\n                  [formControlName]="prop.key"\n                  [id]="prop.key" [type]="prop.type" fxFlex>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase="\'textarea\'">\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <textarea matInput placeholder="{{prop.label}}" rows="{{prop.rows||\'3\'}}" autosize\n                  [formControlName]="prop.key"\n                  [id]="prop.key" [type]="prop.type"></textarea>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase="\'number\'">\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <input matInput placeholder="{{prop.label}}"\n                  [formControlName]="prop.key"\n                  [id]="prop.key" [type]="prop.type">\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase="\'file\'">\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <input type="file"\n                  [formControlName]="prop.key"\n                  [id]="prop.key"\n                  [type]="prop.type"\n                  style="display: none"\n                  (change)="changeFiles($event)" />\n                <input matInput placeholder="{{prop.label}}"\n                  [formControlName]="prop.key + \'Ctrl\'"\n                  [id]="prop.key + \'Ctrl\'" type="text"\n                  (click)="addFiles(prop.key)">\n                <mat-icon matSuffix (click)="addFiles(prop.key)">folder</mat-icon>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase="\'checkbox\'" class="dynform-field-{{prop.key}}">\n              <mat-checkbox\n                [formControlName]="prop.key"\n                [id]="prop.key">\n                {{prop.label}}\n              </mat-checkbox>\n            </div>\n            <div *ngSwitchCase="\'date\'">\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <input matInput [matDatepicker]=picker placeholder="{{prop.label}}"\n                  [formControlName]="prop.key"\n                  [id]="prop.key">\n                <mat-datepicker #picker></mat-datepicker>\n                <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase="\'time\'">\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <input matInput [ngxTimepicker]="tpicker" placeholder="{{prop.label}}"\n                  [format]="24"\n                  [formControlName]="prop.key"\n                  [id]="prop.key">\n                <ngx-material-timepicker #tpicker></ngx-material-timepicker>\n              </mat-form-field>\n            </div>\n\n            <div *ngSwitchCase="\'radio\'" fxLayout="column" class="dynform-field-{{prop.key}}">\n              <div _ngcontent-c20="" style="height: 20px;">\n                <label _ngcontent-c20="" style="transform: translateY(-1.28125em) scale(0.75)\n                    perspective(100px)\n                    translateZ(0.001px);\n                    -ms-transform: translateY(-1.28125em)\n                    scale(0.75);width: 133.33333333%;margin: 20px 0 0 0;font-weight: 100;color: #666;">\n                  {{prop.label}}\n                </label>\n              </div>\n              <mat-radio-group [formControlName]="prop.key" [name]="prop.key" fxLayout="column" style="margin-top: 14px;">\n                <mat-radio-button [value]="option.value" *ngFor="let option of prop.options">\n                  {{option.label}}\n                </mat-radio-button>\n              </mat-radio-group>\n            </div>\n\n            <div *ngSwitchCase="\'select\'">\n              <mat-form-field class="dynform-field-{{prop.key}}" fxFlex>\n                <mat-select [formControlName]="prop.key" placeholder="{{prop.label}}">\n                  <mat-option *ngFor="let option of prop.options" [value]="option.value">\n                    {{ option.label }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n        </div>\n        <div class="error" *ngIf="form.get(prop.key).errors" fxFlex="100%">\n        </div>\n        <div class="error" *ngIf="form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)" fxFlex="100%">\n          <mat-error *ngIf="form.get(prop.key).errors.required">\n            <div *ngIf="drawCustomErrors(prop, \'required\')">\n              {{prop.validationMessages.required}}\n            </div>\n            <div *ngIf="!prop.validationMessages || !prop.validationMessages.required">\n              The field {{ prop.label }} is required.\n            </div>\n          </mat-error>\n          <mat-error *ngIf="form.get(prop.key).errors.match">\n            <div *ngIf="drawCustomErrors(prop, \'match\')">\n              {{prop.validationMessages.match}}\n            </div>\n            <div *ngIf="!prop.validationMessages || !prop.validationMessages.match">\n              The fields doesn\'t match.\n            </div>\n          </mat-error>\n          <mat-error *ngIf="form.get(prop.key).errors.min">\n            <div *ngIf="drawCustomErrors(prop, \'min\')">\n              {{prop.validationMessages.min}}\n            </div>\n            <div *ngIf="!prop.validationMessages || !prop.validationMessages.min">\n              The minimal value is {{form.get(prop.key).errors.min.min}}.\n            </div>\n          </mat-error>\n          <mat-error *ngIf="form.get(prop.key).errors.max">\n            <div *ngIf="drawCustomErrors(prop, \'max\')">\n              {{prop.validationMessages.max}}\n            </div>\n            <div *ngIf="!prop.validationMessages || !prop.validationMessages.max">\n              The max value is {{form.get(prop.key).errors.max.max}}.\n            </div>\n          </mat-error>\n        </div>\n      </div>\n      <div fxFlex></div>\n    </form>\n\n    \x3c!-- <button type="button" mat-raised-button\n      (click)="send()">{{ okText }}</button>\n    <button type="button" mat-button\n      (click)="dialogRef.close(false)">{{ cancelText }}</button> --\x3e\n  '}]}],e.ctorParameters=function(){return[]},e.propDecorators={fields:[{type:t.Input}],submit:[{type:t.Output}]},e}();var h=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{declarations:[v],imports:[n.CommonModule,a.FlexLayoutModule,d.MatButtonModule,o.FormsModule,o.ReactiveFormsModule,i.MatInputModule,l.MatCheckboxModule,p.MatSelectModule,m.MatRadioModule,s.MatIconModule,f.MatDatepickerModule,d.MatNativeDateModule,u.MatAutocompleteModule,c.NgxMaterialTimepickerModule],exports:[v],entryComponents:[v]}]}],e}();e.TWAMd2DynformsComponent=v,e.TWAMd2DynformsModule=h,e.TwaMd2DynformsService=y,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=twa-md2-dynforms.umd.min.js.map