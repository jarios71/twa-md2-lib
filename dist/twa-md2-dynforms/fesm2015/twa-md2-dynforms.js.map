{"version":3,"file":"twa-md2-dynforms.js","sources":["../../../projects/twa-md2-dynforms/src/lib/twa-md2-dynforms.service.ts","../../../projects/twa-md2-dynforms/src/lib/twa-md2-dynforms.component.ts","../../../projects/twa-md2-dynforms/src/lib/twa-md2-dynforms.module.ts","../../../projects/twa-md2-dynforms/src/public-api.ts","../../../projects/twa-md2-dynforms/src/twa-md2-dynforms.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TwaMd2DynformsService {\n\n  constructor() { }\n}\n","import { Component, EventEmitter, OnInit, OnChanges, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { SafeHtml } from '@angular/platform-browser';\n\nimport { map, startWith } from 'rxjs/operators';\n\nexport interface ITWAPromptField {\n  key: string;\n  label: string;\n  type: string;\n  fxFlex: string;\n  value: string;\n  options: any[];\n  autocomplete: any;\n  rows: any[];\n  validation: any;\n  validationMessages?: any;\n}\n\n@Component({\n  selector: 'twa-md2-dynforms',\n  template: `\n    <h2 *ngIf=\"title && title > ''\">{{ title }}</h2>\n    <p *ngIf=\"message && message > ''\" [innerHtml]=\"messageHtml\"></p>\n\n    <form novalidate (ngSubmit)=\"submitForm(form.value)\" [formGroup]=\"form\" fxLayout=\"row wrap\" fxLayoutGap=\"10px\">\n      <div *ngFor=\"let prop of fields\" fxFlex=\"{{(prop.fxFlex != 'false') ? ('calc(' + prop.fxFlex + ' - 10px)') : ((prop.fxFlex == 'false') ? '0 0 0' : '100%')}}\" fxLayout=\"column\">\n        <div [ngSwitch]=\"prop.type\" fxFlex=\"100%\">\n          <div *ngSwitchCase=\"'text'\">\n            <mat-form-field class=\"dynform-field-{{prop.key}}\" *ngIf=\"!prop.autocomplete\" fxFlex>\n              <input matInput placeholder=\"{{prop.label}}\"\n                [formControlName]=\"prop.key\"\n                [id]=\"prop.key\" [type]=\"prop.type\" fxFlex>\n            </mat-form-field>\n            <div *ngIf=\"prop.autocomplete\" fxFlex>\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <input matInput placeholder=\"{{prop.label}}\"\n                  [formControlName]=\"prop.key\"\n                  [matAutocomplete]=\"auto\"\n                  (blur)=\"acCheckBlur(prop)\"\n                  [id]=\"prop.key\" [type]=\"prop.type\">\n              </mat-form-field>\n              <mat-autocomplete #auto=\"matAutocomplete\"\n                (optionSelected)=\"acClick(prop, $event)\">\n                <mat-option *ngFor=\"let option of prop.autocomplete.filteredOptions | async\"\n                  [value]=\"option\">\n                {{ option }}\n                </mat-option>\n              </mat-autocomplete>\n            </div>\n          </div>\n            <div *ngSwitchCase=\"'password'\">\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <input matInput type=\"password\" placeholder=\"{{prop.label}}\"\n                  [formControlName]=\"prop.key\"\n                  [id]=\"prop.key\" [type]=\"prop.type\" fxFlex>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase=\"'textarea'\">\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <textarea matInput placeholder=\"{{prop.label}}\" rows=\"{{prop.rows||'3'}}\" autosize\n                  [formControlName]=\"prop.key\"\n                  [id]=\"prop.key\" [type]=\"prop.type\"></textarea>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase=\"'number'\">\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <input matInput placeholder=\"{{prop.label}}\"\n                  [formControlName]=\"prop.key\"\n                  [id]=\"prop.key\" [type]=\"prop.type\">\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase=\"'file'\">\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <input type=\"file\"\n                  [formControlName]=\"prop.key\"\n                  [id]=\"prop.key\"\n                  [type]=\"prop.type\"\n                  style=\"display: none\"\n                  (change)=\"changeFiles($event)\" />\n                <input matInput placeholder=\"{{prop.label}}\"\n                  [formControlName]=\"prop.key + 'Ctrl'\"\n                  [id]=\"prop.key + 'Ctrl'\" type=\"text\"\n                  (click)=\"addFiles(prop.key)\">\n                <mat-icon matSuffix (click)=\"addFiles(prop.key)\">folder</mat-icon>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase=\"'checkbox'\" class=\"dynform-field-{{prop.key}}\">\n              <mat-checkbox\n                [formControlName]=\"prop.key\"\n                [id]=\"prop.key\">\n                {{prop.label}}\n              </mat-checkbox>\n            </div>\n            <div *ngSwitchCase=\"'date'\">\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <input matInput [matDatepicker]=picker placeholder=\"{{prop.label}}\"\n                  [formControlName]=\"prop.key\"\n                  [id]=\"prop.key\">\n                <mat-datepicker #picker></mat-datepicker>\n                <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n              </mat-form-field>\n            </div>\n            <div *ngSwitchCase=\"'time'\">\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <input matInput [ngxTimepicker]=\"tpicker\" placeholder=\"{{prop.label}}\"\n                  [format]=\"24\"\n                  [formControlName]=\"prop.key\"\n                  [id]=\"prop.key\">\n                <ngx-material-timepicker #tpicker></ngx-material-timepicker>\n              </mat-form-field>\n            </div>\n\n            <div *ngSwitchCase=\"'radio'\" fxLayout=\"column\" class=\"dynform-field-{{prop.key}}\">\n              <div _ngcontent-c20=\"\" style=\"height: 20px;\">\n                <label _ngcontent-c20=\"\" style=\"transform: translateY(-1.28125em) scale(0.75)\n                    perspective(100px)\n                    translateZ(0.001px);\n                    -ms-transform: translateY(-1.28125em)\n                    scale(0.75);width: 133.33333333%;margin: 20px 0 0 0;font-weight: 100;color: #666;\">\n                  {{prop.label}}\n                </label>\n              </div>\n              <mat-radio-group [formControlName]=\"prop.key\" [name]=\"prop.key\" fxLayout=\"column\" style=\"margin-top: 14px;\">\n                <mat-radio-button [value]=\"option.value\" *ngFor=\"let option of prop.options\">\n                  {{option.label}}\n                </mat-radio-button>\n              </mat-radio-group>\n            </div>\n\n            <div *ngSwitchCase=\"'select'\">\n              <mat-form-field class=\"dynform-field-{{prop.key}}\" fxFlex>\n                <mat-select [formControlName]=\"prop.key\" placeholder=\"{{prop.label}}\">\n                  <mat-option *ngFor=\"let option of prop.options\" [value]=\"option.value\">\n                    {{ option.label }}\n                  </mat-option>\n                </mat-select>\n              </mat-form-field>\n            </div>\n        </div>\n        <div class=\"error\" *ngIf=\"form.get(prop.key).errors\" fxFlex=\"100%\">\n        </div>\n        <div class=\"error\" *ngIf=\"form.get(prop.key).invalid && (form.get(prop.key).dirty || form.get(prop.key).touched)\" fxFlex=\"100%\">\n          <mat-error *ngIf=\"form.get(prop.key).errors.required\">\n            <div *ngIf=\"drawCustomErrors(prop, 'required')\">\n              {{prop.validationMessages.required}}\n            </div>\n            <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.required\">\n              The field {{ prop.label }} is required.\n            </div>\n          </mat-error>\n          <mat-error *ngIf=\"form.get(prop.key).errors.match\">\n            <div *ngIf=\"drawCustomErrors(prop, 'match')\">\n              {{prop.validationMessages.match}}\n            </div>\n            <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.match\">\n              The fields doesn't match.\n            </div>\n          </mat-error>\n          <mat-error *ngIf=\"form.get(prop.key).errors.min\">\n            <div *ngIf=\"drawCustomErrors(prop, 'min')\">\n              {{prop.validationMessages.min}}\n            </div>\n            <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.min\">\n              The minimal value is {{form.get(prop.key).errors.min.min}}.\n            </div>\n          </mat-error>\n          <mat-error *ngIf=\"form.get(prop.key).errors.max\">\n            <div *ngIf=\"drawCustomErrors(prop, 'max')\">\n              {{prop.validationMessages.max}}\n            </div>\n            <div *ngIf=\"!prop.validationMessages || !prop.validationMessages.max\">\n              The max value is {{form.get(prop.key).errors.max.max}}.\n            </div>\n          </mat-error>\n        </div>\n      </div>\n      <div fxFlex></div>\n    </form>\n\n    <!-- <button type=\"button\" mat-raised-button\n      (click)=\"send()\">{{ okText }}</button>\n    <button type=\"button\" mat-button\n      (click)=\"dialogRef.close(false)\">{{ cancelText }}</button> -->\n  `,\n  styles: []\n})\nexport class TWAMd2DynformsComponent implements OnInit, OnChanges {\n\n  data: any;\n\n  public form: FormGroup = new FormGroup({});\n  formSubmitEv: EventEmitter<any> = new EventEmitter();\n  public formData: FormData = new FormData();\n  public isMultipart = false;\n\n  public title: string;\n  public message: string;\n  public messageHtml: SafeHtml;\n\n  @Input()\n  public fields: ITWAPromptField[];\n\n  @Output()\n  public submit = this.formSubmitEv;\n\n  public okText: string;\n  public cancelText: string;\n  public onSubmit: any;\n\n  constructor() { }\n\n  ngOnInit() {\n    // this.createForm();\n  }\n\n  ngOnChanges() {\n    this.createForm();\n  }\n\n  createForm() {\n\n    const formGroup = {};\n    for (const i in this.fields) {\n        if (this.fields.hasOwnProperty(i)) {\n            if (this.fields[i].type !== 'file') {\n                formGroup[this.fields[i].key] = new FormControl(\n                    this.fields[i].value || '',\n                    this.mapValidators(this.fields[i].validation, this.fields[i].key)\n                );\n            } else {\n                formGroup[this.fields[i].key] = new FormControl(\n                    '',\n                    this.mapValidators(this.fields[i].validation, this.fields[i].key)\n                );\n            }\n            if (typeof this.fields[i].autocomplete !== 'undefined' && this.fields[i].autocomplete !== undefined) {\n                this.fields[i].autocomplete.filteredOptions = this.getFormGroupEvent(formGroup, i);\n            }\n            if (this.fields[i].type === 'file') {\n                this.isMultipart = true;\n                formGroup[this.fields[i].key + 'Ctrl'] = new FormControl(\n                    this.fields[i].value\n                );\n            }\n        }\n    }\n\n    this.form = new FormGroup(formGroup);\n\n  }\n\n  getFormGroupEvent(formGroup, i) {\n    return formGroup[this.fields[i].key].valueChanges.pipe(\n        startWith(''),\n        map(filterValue => filterValue ? this._filterValues(filterValue, this.fields[i].autocomplete.options) :\n            this.fields[i].autocomplete.options.slice())\n    );\n  }\n\n  log(object: any) {\n      console.log(object);\n  }\n\n  private _filterValues(value, options) {\n\n      const filteredValue = value.toLowerCase();\n\n      return options.filter(option => option.toLowerCase().indexOf(filteredValue) >= 0);\n\n  }\n\n  getFormSubmitEv() {\n          return this.formSubmitEv;\n  }\n\n  send() {\n    // let i;\n    this.form.updateValueAndValidity();\n    if (this.form.status !== 'INVALID') {\n      console.log(this.form.controls);\n      console.log(this.form.value);\n      if (this.isMultipart) {\n        const fields = this.fields;\n        for (const i in fields) {\n          if (fields[i].type !== 'file') {\n            this.formData.set(fields[i].key, this.form.value[fields[i].key]);\n            console.log(i, this.formData.getAll(fields[i].key));\n          } else {\n            console.log('file', i, this.formData.getAll(fields[i].key));\n          }\n        }\n        // this.dialogRef.close(this.formData);\n        // TODO: Emit results\n      } else {\n        // this.dialogRef.close(this.form.value);\n        // TODO: Emit results\n      }\n    } else {\n      for (const i in this.form.controls) {\n      // console.log(this.form.controls[i]);\n        if (this.form.controls.hasOwnProperty(i)) {\n          this.form.controls[i].markAsTouched({ onlySelf: true });\n          this.form.controls[i].updateValueAndValidity();\n        }\n      }\n    }\n  }\n\n  acClick(field: any, event: any) {\n      // console.log(event);\n      // console.log(field.autocomplete);\n      if (typeof field.autocomplete !== 'undefined') {\n          if (typeof field.autocomplete.forceSelect !== 'undefined' &&\n              field.autocomplete.forceSelect) {\n              field.autocomplete.selected = event.option.value;\n          }\n      }\n  }\n\n  acCheckBlur(field) {\n      // console.log(field.autocomplete.selected, this.form.controls[field.key].value);\n      if (typeof field.autocomplete !== 'undefined') {\n          if (typeof field.autocomplete.forceSelect !== 'undefined' &&\n              field.autocomplete.forceSelect) {\n              if (!field.autocomplete.selected ||\n                  field.autocomplete.selected !== this.form.controls[field.key].value) {\n                  this.form.controls[field.key].setValue(null);\n                  field.autocomplete.selected = '';\n              }\n          }\n      }\n  }\n\n  submitForm(form: any) {\n          this.formSubmitEv.emit(form);\n  }\n\n  drawCustomErrors(prop, error) {\n      let ret = false;\n      if (typeof prop.validationMessages !== 'undefined') {\n          if (typeof prop.validationMessages[error] !== 'undefined') {\n              ret = prop.validationMessages[error] > '';\n          } else {\n              ret = false;\n          }\n      } else {\n          ret = false;\n      }\n      return ret;\n  }\n\n  private mapValidators(validators: any, field) {\n\n      const formValidators = [];\n\n      if (validators) {\n          for (const validation of Object.keys(validators)) {\n              if (validation === 'required') {\n                  formValidators.push(Validators.required);\n              } else if (validation === 'match') {\n                  formValidators.push(() => {\n                      let ret: any | boolean = false;\n                      const control = this.form.get(validators[validation]);\n                      if (!this.form.get(field)) {\n                          ret = null;\n                      }\n                      ret = !(this.form.get(field) && this.form.get(field).value === control.value);\n                      if (!ret) {\n                          ret = null;\n                      } else {\n                          ret = {\n                              match: true\n                          };\n                      }\n                      return ret;\n                  });\n              } else if (validation === 'min') {\n                  formValidators.push(Validators.min(validators[validation]));\n              } else if (validation === 'max') {\n                  formValidators.push(Validators.max(validators[validation]));\n              }\n          }\n      }\n\n      return formValidators;\n  }\n\n  addFiles(formElement): void {\n\n      console.log(formElement, this.form.get(formElement));\n      const elem = document.getElementById(formElement) as HTMLInputElement;\n      elem.click();\n      // this.form.get(formElement).nativeElement.click();\n\n  }\n\n  changeFiles(formElement): void {\n\n      this.form.get(formElement.target.id + 'Ctrl').setValue(formElement.target.files[0].name);\n\n      // console.log(formElement);\n      // const formData = new FormData();\n      this.formData.append(formElement.target.id, formElement.target.files[0]);\n      console.log(JSON.stringify(this.formData));\n      console.log(this.formData);\n      // this.form.get(formElement.target.id).setValue(JSON.stringify(formData));\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\nimport { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';\n\nimport { TWAMd2DynformsComponent } from './twa-md2-dynforms.component';\n\n@NgModule({\n  declarations: [TWAMd2DynformsComponent],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatIconModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatAutocompleteModule,\n    NgxMaterialTimepickerModule,\n  ],\n  exports: [TWAMd2DynformsComponent],\n  // entryComponents: [TWAMd2DynformsComponent],\n})\nexport class TWAMd2DynformsModule { }\n","/*\n * Public API Surface of twa-md2-dynforms\n */\n\nexport * from './lib/twa-md2-dynforms.service';\nexport * from './lib/twa-md2-dynforms.component';\nexport * from './lib/twa-md2-dynforms.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;MAKa,qBAAqB;IAEhC,iBAAiB;;;;YALlB,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;MCuLY,uBAAuB;IAuBlC;QAnBO,SAAI,GAAc,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;QAC3C,iBAAY,GAAsB,IAAI,YAAY,EAAE,CAAC;QAC9C,aAAQ,GAAa,IAAI,QAAQ,EAAE,CAAC;QACpC,gBAAW,GAAG,KAAK,CAAC;QAUpB,WAAM,GAAG,IAAI,CAAC,YAAY,CAAC;KAMjB;IAEjB,QAAQ;;KAEP;IAED,WAAW;QACT,IAAI,CAAC,UAAU,EAAE,CAAC;KACnB;IAED,UAAU;QAER,MAAM,SAAS,GAAG,EAAE,CAAC;QACrB,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE;YACzB,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;gBAC/B,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;oBAChC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,WAAW,CAC3C,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,EAC1B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpE,CAAC;iBACL;qBAAM;oBACH,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,WAAW,CAC3C,EAAE,EACF,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpE,CAAC;iBACL;gBACD,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,KAAK,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,KAAK,SAAS,EAAE;oBACjG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;iBACtF;gBACD,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;oBAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;oBACxB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI,WAAW,CACpD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CACvB,CAAC;iBACL;aACJ;SACJ;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC;KAEtC;IAED,iBAAiB,CAAC,SAAS,EAAE,CAAC;QAC5B,OAAO,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,YAAY,CAAC,IAAI,CAClD,SAAS,CAAC,EAAE,CAAC,EACb,GAAG,CAAC,WAAW,IAAI,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC;YACjG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CACnD,CAAC;KACH;IAED,GAAG,CAAC,MAAW;QACX,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACvB;IAEO,aAAa,CAAC,KAAK,EAAE,OAAO;QAEhC,MAAM,aAAa,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAE1C,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;KAErF;IAED,eAAe;QACP,OAAO,IAAI,CAAC,YAAY,CAAC;KAChC;IAED,IAAI;;QAEF,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACnC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,WAAW,EAAE;gBACpB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC3B,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;oBACtB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;wBAC7B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACjE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBACrD;yBAAM;wBACL,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBAC7D;iBACF;;;aAGF;iBAAM;;;aAGN;SACF;aAAM;YACL,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;;gBAElC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;oBACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;oBACxD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,sBAAsB,EAAE,CAAC;iBAChD;aACF;SACF;KACF;IAED,OAAO,CAAC,KAAU,EAAE,KAAU;;;QAG1B,IAAI,OAAO,KAAK,CAAC,YAAY,KAAK,WAAW,EAAE;YAC3C,IAAI,OAAO,KAAK,CAAC,YAAY,CAAC,WAAW,KAAK,WAAW;gBACrD,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE;gBAChC,KAAK,CAAC,YAAY,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;aACpD;SACJ;KACJ;IAED,WAAW,CAAC,KAAK;;QAEb,IAAI,OAAO,KAAK,CAAC,YAAY,KAAK,WAAW,EAAE;YAC3C,IAAI,OAAO,KAAK,CAAC,YAAY,CAAC,WAAW,KAAK,WAAW;gBACrD,KAAK,CAAC,YAAY,CAAC,WAAW,EAAE;gBAChC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,QAAQ;oBAC5B,KAAK,CAAC,YAAY,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE;oBACrE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;oBAC7C,KAAK,CAAC,YAAY,CAAC,QAAQ,GAAG,EAAE,CAAC;iBACpC;aACJ;SACJ;KACJ;IAED,UAAU,CAAC,IAAS;QACZ,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KACpC;IAED,gBAAgB,CAAC,IAAI,EAAE,KAAK;QACxB,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,IAAI,OAAO,IAAI,CAAC,kBAAkB,KAAK,WAAW,EAAE;YAChD,IAAI,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,WAAW,EAAE;gBACvD,GAAG,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;aAC7C;iBAAM;gBACH,GAAG,GAAG,KAAK,CAAC;aACf;SACJ;aAAM;YACH,GAAG,GAAG,KAAK,CAAC;SACf;QACD,OAAO,GAAG,CAAC;KACd;IAEO,aAAa,CAAC,UAAe,EAAE,KAAK;QAExC,MAAM,cAAc,GAAG,EAAE,CAAC;QAE1B,IAAI,UAAU,EAAE;YACZ,KAAK,MAAM,UAAU,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBAC9C,IAAI,UAAU,KAAK,UAAU,EAAE;oBAC3B,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;iBAC5C;qBAAM,IAAI,UAAU,KAAK,OAAO,EAAE;oBAC/B,cAAc,CAAC,IAAI,CAAC;wBAChB,IAAI,GAAG,GAAkB,KAAK,CAAC;wBAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;wBACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;4BACvB,GAAG,GAAG,IAAI,CAAC;yBACd;wBACD,GAAG,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC;wBAC9E,IAAI,CAAC,GAAG,EAAE;4BACN,GAAG,GAAG,IAAI,CAAC;yBACd;6BAAM;4BACH,GAAG,GAAG;gCACF,KAAK,EAAE,IAAI;6BACd,CAAC;yBACL;wBACD,OAAO,GAAG,CAAC;qBACd,CAAC,CAAC;iBACN;qBAAM,IAAI,UAAU,KAAK,KAAK,EAAE;oBAC7B,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBAC/D;qBAAM,IAAI,UAAU,KAAK,KAAK,EAAE;oBAC7B,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBAC/D;aACJ;SACJ;QAED,OAAO,cAAc,CAAC;KACzB;IAED,QAAQ,CAAC,WAAW;QAEhB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;QACrD,MAAM,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAqB,CAAC;QACtE,IAAI,CAAC,KAAK,EAAE,CAAC;;KAGhB;IAED,WAAW,CAAC,WAAW;QAEnB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;;;QAIzF,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACzE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;KAG9B;;;YArYF,SAAS,SAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmKT;aAEF;;;;qBAcE,KAAK;qBAGL,MAAM;;;MClKI,oBAAoB;;;YArBhC,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,uBAAuB,CAAC;gBACvC,OAAO,EAAE;oBACP,YAAY;oBACZ,gBAAgB;oBAChB,eAAe;oBACf,WAAW;oBACX,mBAAmB;oBACnB,cAAc;oBACd,iBAAiB;oBACjB,eAAe;oBACf,cAAc;oBACd,aAAa;oBACb,mBAAmB;oBACnB,mBAAmB;oBACnB,qBAAqB;oBACrB,2BAA2B;iBAC5B;gBACD,OAAO,EAAE,CAAC,uBAAuB,CAAC;aAEnC;;;ACxCD;;;;ACAA;;;;;;"}